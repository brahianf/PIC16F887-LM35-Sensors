

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Aug 03 18:54:06 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og9 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text11,local,class=CODE,merge=1,delta=2
    20                           	psect	text12,local,class=CODE,merge=1,delta=2
    21                           	psect	text13,local,class=CODE,merge=1,delta=2
    22                           	psect	text14,local,class=CODE,merge=1,delta=2
    23                           	psect	text15,local,class=CODE,merge=1,delta=2
    24                           	psect	text16,local,class=CODE,merge=1,delta=2
    25                           	dabs	1,0x7E,2
    26  0000                     
    27                           ; Version 2.05
    28                           ; Generated 20/12/2018 GMT
    29                           ; 
    30                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC16F887 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     	;# 
    62  0001                     	;# 
    63  0002                     	;# 
    64  0003                     	;# 
    65  0004                     	;# 
    66  0005                     	;# 
    67  0006                     	;# 
    68  0007                     	;# 
    69  0008                     	;# 
    70  0009                     	;# 
    71  000A                     	;# 
    72  000B                     	;# 
    73  000C                     	;# 
    74  000D                     	;# 
    75  000E                     	;# 
    76  000E                     	;# 
    77  000F                     	;# 
    78  0010                     	;# 
    79  0011                     	;# 
    80  0012                     	;# 
    81  0013                     	;# 
    82  0014                     	;# 
    83  0015                     	;# 
    84  0015                     	;# 
    85  0016                     	;# 
    86  0017                     	;# 
    87  0018                     	;# 
    88  0019                     	;# 
    89  001A                     	;# 
    90  001B                     	;# 
    91  001B                     	;# 
    92  001C                     	;# 
    93  001D                     	;# 
    94  001E                     	;# 
    95  001F                     	;# 
    96  0081                     	;# 
    97  0085                     	;# 
    98  0086                     	;# 
    99  0087                     	;# 
   100  0088                     	;# 
   101  0089                     	;# 
   102  008C                     	;# 
   103  008D                     	;# 
   104  008E                     	;# 
   105  008F                     	;# 
   106  0090                     	;# 
   107  0091                     	;# 
   108  0092                     	;# 
   109  0093                     	;# 
   110  0093                     	;# 
   111  0093                     	;# 
   112  0094                     	;# 
   113  0095                     	;# 
   114  0096                     	;# 
   115  0097                     	;# 
   116  0098                     	;# 
   117  0099                     	;# 
   118  009A                     	;# 
   119  009B                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009E                     	;# 
   123  009F                     	;# 
   124  0105                     	;# 
   125  0107                     	;# 
   126  0108                     	;# 
   127  0109                     	;# 
   128  010C                     	;# 
   129  010C                     	;# 
   130  010D                     	;# 
   131  010E                     	;# 
   132  010F                     	;# 
   133  0185                     	;# 
   134  0187                     	;# 
   135  0188                     	;# 
   136  0189                     	;# 
   137  018C                     	;# 
   138  018D                     	;# 
   139  0000                     	;# 
   140  0001                     	;# 
   141  0002                     	;# 
   142  0003                     	;# 
   143  0004                     	;# 
   144  0005                     	;# 
   145  0006                     	;# 
   146  0007                     	;# 
   147  0008                     	;# 
   148  0009                     	;# 
   149  000A                     	;# 
   150  000B                     	;# 
   151  000C                     	;# 
   152  000D                     	;# 
   153  000E                     	;# 
   154  000E                     	;# 
   155  000F                     	;# 
   156  0010                     	;# 
   157  0011                     	;# 
   158  0012                     	;# 
   159  0013                     	;# 
   160  0014                     	;# 
   161  0015                     	;# 
   162  0015                     	;# 
   163  0016                     	;# 
   164  0017                     	;# 
   165  0018                     	;# 
   166  0019                     	;# 
   167  001A                     	;# 
   168  001B                     	;# 
   169  001B                     	;# 
   170  001C                     	;# 
   171  001D                     	;# 
   172  001E                     	;# 
   173  001F                     	;# 
   174  0081                     	;# 
   175  0085                     	;# 
   176  0086                     	;# 
   177  0087                     	;# 
   178  0088                     	;# 
   179  0089                     	;# 
   180  008C                     	;# 
   181  008D                     	;# 
   182  008E                     	;# 
   183  008F                     	;# 
   184  0090                     	;# 
   185  0091                     	;# 
   186  0092                     	;# 
   187  0093                     	;# 
   188  0093                     	;# 
   189  0093                     	;# 
   190  0094                     	;# 
   191  0095                     	;# 
   192  0096                     	;# 
   193  0097                     	;# 
   194  0098                     	;# 
   195  0099                     	;# 
   196  009A                     	;# 
   197  009B                     	;# 
   198  009C                     	;# 
   199  009D                     	;# 
   200  009E                     	;# 
   201  009F                     	;# 
   202  0105                     	;# 
   203  0107                     	;# 
   204  0108                     	;# 
   205  0109                     	;# 
   206  010C                     	;# 
   207  010C                     	;# 
   208  010D                     	;# 
   209  010E                     	;# 
   210  010F                     	;# 
   211  0185                     	;# 
   212  0187                     	;# 
   213  0188                     	;# 
   214  0189                     	;# 
   215  018C                     	;# 
   216  018D                     	;# 
   217                           
   218                           	psect	strings
   219  0003                     __pstrings:	
   220  0003                     stringtab:	
   221  0003                     __stringtab:	
   222                           
   223                           ;	String table - string pointers are 1 byte each
   224  0003  1BFF               	btfsc	btemp+1,7
   225  0004  280D               	ljmp	stringcode
   226  0005  1383               	bcf	3,7
   227  0006  187F               	btfsc	btemp+1,0
   228  0007  1783               	bsf	3,7
   229  0008  0800               	movf	0,w
   230  0009  0A84               	incf	4,f
   231  000A  1903               	skipnz
   232  000B  0AFF               	incf	btemp+1,f
   233  000C  0008               	return
   234  000D                     stringcode:	
   235  000D                     stringdir:	
   236  000D  3000               	movlw	high stringdir
   237  000E  008A               	movwf	10
   238  000F  0804               	movf	4,w
   239  0010  0A84               	incf	4,f
   240  0011  0782               	addwf	2,f
   241  0012                     __stringbase:	
   242  0012  3400               	retlw	0
   243  0013                     __end_of__stringtab:	
   244  0013                     _dpowers:	
   245  0013  3401               	retlw	1
   246  0014  3400               	retlw	0
   247  0015  340A               	retlw	10
   248  0016  3400               	retlw	0
   249  0017  3464               	retlw	100
   250  0018  3400               	retlw	0
   251  0019  34E8               	retlw	232
   252  001A  3403               	retlw	3
   253  001B  3410               	retlw	16
   254  001C  3427               	retlw	39
   255  001D                     __end_of_dpowers:	
   256  001D                     _message:	
   257  001D  3453               	retlw	83
   258  001E  3465               	retlw	101
   259  001F  346E               	retlw	110
   260  0020  3473               	retlw	115
   261  0021  346F               	retlw	111
   262  0022  3472               	retlw	114
   263  0023  3465               	retlw	101
   264  0024  3473               	retlw	115
   265  0025  3420               	retlw	32
   266  0026  344C               	retlw	76
   267  0027  3461               	retlw	97
   268  0028  3462               	retlw	98
   269  0029  3420               	retlw	32
   270  002A  3444               	retlw	68
   271  002B  3469               	retlw	105
   272  002C  3467               	retlw	103
   273  002D  3469               	retlw	105
   274  002E  3474               	retlw	116
   275  002F  3461               	retlw	97
   276  0030  346C               	retlw	108
   277  0031  3465               	retlw	101
   278  0032  3473               	retlw	115
   279  0033  3420               	retlw	32
   280  0034  340D               	retlw	13
   281  0035  340A               	retlw	10
   282  0036  3400               	retlw	0
   283  0037                     __end_of_message:	
   284  001E                     _ADRESH	set	30
   285  001F                     _ADCON0bits	set	31
   286  001F                     _ADCON0	set	31
   287  0019                     _TXREG	set	25
   288  001A                     _RCREG	set	26
   289  0018                     _RCSTA	set	24
   290  0006                     _PORTBbits	set	6
   291  00C4                     _CREN	set	196
   292  00C1                     _OERR	set	193
   293  0065                     _RCIF	set	101
   294  009E                     _ADRESL	set	158
   295  0085                     _TRISAbits	set	133
   296  0085                     _TRISA	set	133
   297  008F                     _OSCCON	set	143
   298  009F                     _ADCON1	set	159
   299  0087                     _TRISCbits	set	135
   300  0086                     _TRISB	set	134
   301  0098                     _TXSTA	set	152
   302  0099                     _SPBRG	set	153
   303  0086                     _TRISBbits	set	134
   304  04C1                     _TRMT	set	1217
   305  0188                     _ANSELbits	set	392
   306  0189                     _ANSELH	set	393
   307  0037                     STR_1:	
   308  0037  3454               	retlw	84	;'T'
   309  0038  3465               	retlw	101	;'e'
   310  0039  346D               	retlw	109	;'m'
   311  003A  3470               	retlw	112	;'p'
   312  003B  3431               	retlw	49	;'1'
   313  003C  3420               	retlw	32	;' '
   314  003D  3425               	retlw	37	;'%'
   315  003E  3430               	retlw	48	;'0'
   316  003F  3433               	retlw	51	;'3'
   317  0040  3464               	retlw	100	;'d'
   318  0041  3420               	retlw	32	;' '
   319  0042  3400               	retlw	0
   320  0043                     STR_3:	
   321  0043  3454               	retlw	84	;'T'
   322  0044  3432               	retlw	50	;'2'
   323  0045  3420               	retlw	32	;' '
   324  0046  3425               	retlw	37	;'%'
   325  0047  3430               	retlw	48	;'0'
   326  0048  3433               	retlw	51	;'3'
   327  0049  3464               	retlw	100	;'d'
   328  004A  3420               	retlw	32	;' '
   329  004B  3400               	retlw	0
   330  004C                     STR_5:	
   331  004C  3454               	retlw	84	;'T'
   332  004D  3433               	retlw	51	;'3'
   333  004E  3420               	retlw	32	;' '
   334  004F  3425               	retlw	37	;'%'
   335  0050  3430               	retlw	48	;'0'
   336  0051  3433               	retlw	51	;'3'
   337  0052  3464               	retlw	100	;'d'
   338  0053  3420               	retlw	32	;' '
   339  0054  3400               	retlw	0
   340  0055                     STR_6:	
   341  0055  340D               	retlw	13
   342  0056  340A               	retlw	10
   343  0057  3400               	retlw	0
   344  0058                     STR_2:	
   345  0058  342C               	retlw	44	;','
   346  0059  3400               	retlw	0
   347  0058                     
   348                           ; #config settings
   349  0000                     
   350                           	psect	cinit
   351  07FC                     start_initialization:	
   352  07FC                     __initialization:	
   353  07FC                     end_of_initialization:	
   354                           ;End of C runtime variable initialization code
   355                           
   356  07FC                     __end_of__initialization:	
   357  07FC  0183               	clrf	3
   358  07FD  120A  118A  2D20   	ljmp	_main	;jump to C main() function
   359                           
   360                           	psect	cstackCOMMON
   361  0070                     __pcstackCOMMON:	
   362  0070                     ?_isdigit:	
   363  0070                     ?_UART_Data_Ready:	
   364                           ; 1 bit 
   365                           
   366  0070                     ?_Lcd_Cmd:	
   367                           ; 1 bit 
   368                           
   369  0070                     ??_Lcd_Cmd:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0070                     ?_Lcd_Chr_CP:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0070                     ??_Lcd_Chr_CP:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0070                     ??_isdigit:	
   379                           ; 1 bytes @ 0x0
   380                           
   381  0070                     ?_Lcd_Init:	
   382                           ; 1 bytes @ 0x0
   383                           
   384  0070                     ??_UART_Data_Ready:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0070                     ?_UART_GetC:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0070                     ??_UART_GetC:	
   391                           ; 1 bytes @ 0x0
   392                           
   393  0070                     ?_UART_PutC:	
   394                           ; 1 bytes @ 0x0
   395                           
   396  0070                     ??_UART_PutC:	
   397                           ; 1 bytes @ 0x0
   398                           
   399  0070                     ?_main:	
   400                           ; 1 bytes @ 0x0
   401                           
   402  0070                     ?_readADC:	
   403                           ; 1 bytes @ 0x0
   404                           
   405  0070                     ?___wmul:	
   406                           ; 2 bytes @ 0x0
   407                           
   408  0070                     ?___lwdiv:	
   409                           ; 2 bytes @ 0x0
   410                           
   411  0070                     ?___lldiv:	
   412                           ; 2 bytes @ 0x0
   413                           
   414  0070                     UART_PutC@data:	
   415                           ; 4 bytes @ 0x0
   416                           
   417  0070                     _isdigit$717:	
   418                           ; 1 bytes @ 0x0
   419                           
   420  0070                     ___wmul@multiplier:	
   421                           ; 1 bytes @ 0x0
   422                           
   423  0070                     ___lwdiv@divisor:	
   424                           ; 2 bytes @ 0x0
   425                           
   426  0070                     ___lldiv@divisor:	
   427                           ; 2 bytes @ 0x0
   428                           
   429                           
   430                           ; 4 bytes @ 0x0
   431  0070                     	ds	1
   432  0071                     ?_UART_Print:	
   433  0071                     isdigit@c:	
   434                           ; 1 bytes @ 0x1
   435                           
   436  0071                     UART_Print@data:	
   437                           ; 1 bytes @ 0x1
   438                           
   439                           
   440                           ; 2 bytes @ 0x1
   441  0071                     	ds	1
   442  0072                     ??_readADC:	
   443  0072                     Lcd_Chr_CP@data:	
   444                           ; 1 bytes @ 0x2
   445                           
   446  0072                     Lcd_Cmd@data:	
   447                           ; 1 bytes @ 0x2
   448                           
   449  0072                     ___wmul@multiplicand:	
   450                           ; 1 bytes @ 0x2
   451                           
   452  0072                     ___lwdiv@dividend:	
   453                           ; 2 bytes @ 0x2
   454                           
   455                           
   456                           ; 2 bytes @ 0x2
   457  0072                     	ds	1
   458  0073                     ??_Lcd_Init:	
   459  0073                     ?_Lcd_Out2:	
   460                           ; 1 bytes @ 0x3
   461                           
   462  0073                     ??_UART_Print:	
   463                           ; 1 bytes @ 0x3
   464                           
   465  0073                     Lcd_Out2@x:	
   466                           ; 1 bytes @ 0x3
   467                           
   468                           
   469                           ; 1 bytes @ 0x3
   470  0073                     	ds	1
   471  0074                     ??___wmul:	
   472  0074                     ??___lwdiv:	
   473                           ; 1 bytes @ 0x4
   474                           
   475  0074                     Lcd_Out2@buffer:	
   476                           ; 1 bytes @ 0x4
   477                           
   478  0074                     UART_Print@i:	
   479                           ; 1 bytes @ 0x4
   480                           
   481  0074                     readADC@channel:	
   482                           ; 1 bytes @ 0x4
   483                           
   484  0074                     ___wmul@product:	
   485                           ; 1 bytes @ 0x4
   486                           
   487  0074                     ___lldiv@dividend:	
   488                           ; 2 bytes @ 0x4
   489                           
   490                           
   491                           ; 4 bytes @ 0x4
   492  0074                     	ds	1
   493  0075                     ??_Lcd_Out2:	
   494  0075                     Lcd_Init@data:	
   495                           ; 1 bytes @ 0x5
   496                           
   497  0075                     readADC@adc:	
   498                           ; 1 bytes @ 0x5
   499                           
   500  0075                     ___lwdiv@quotient:	
   501                           ; 2 bytes @ 0x5
   502                           
   503                           
   504                           ; 2 bytes @ 0x5
   505  0075                     	ds	1
   506  0076                     Lcd_Out2@y:	
   507                           
   508                           ; 1 bytes @ 0x6
   509  0076                     	ds	1
   510  0077                     Lcd_Out2@data:	
   511  0077                     ___lwdiv@counter:	
   512                           ; 1 bytes @ 0x7
   513                           
   514                           
   515                           ; 1 bytes @ 0x7
   516  0077                     	ds	1
   517  0078                     ??___lldiv:	
   518  0078                     ?___lwmod:	
   519                           ; 1 bytes @ 0x8
   520                           
   521  0078                     ___lwmod@divisor:	
   522                           ; 2 bytes @ 0x8
   523                           
   524                           
   525                           ; 2 bytes @ 0x8
   526  0078                     	ds	1
   527  0079                     ___lldiv@quotient:	
   528                           
   529                           ; 4 bytes @ 0x9
   530  0079                     	ds	1
   531  007A                     ___lwmod@dividend:	
   532                           
   533                           ; 2 bytes @ 0xA
   534  007A                     	ds	2
   535  007C                     ??___lwmod:	
   536                           
   537                           ; 1 bytes @ 0xC
   538  007C                     	ds	1
   539  007D                     ___lldiv@counter:	
   540  007D                     ___lwmod@counter:	
   541                           ; 1 bytes @ 0xD
   542                           
   543                           
   544                           ; 1 bytes @ 0xD
   545  007D                     	ds	1
   546                           
   547                           	psect	cstackBANK0
   548  0020                     __pcstackBANK0:	
   549  0020                     ?_UART_Init:	
   550  0020                     ?_sprintf:	
   551                           ; 1 bytes @ 0x0
   552                           
   553  0020                     sprintf@f:	
   554                           ; 2 bytes @ 0x0
   555                           
   556  0020                     UART_Init@baud_rate:	
   557                           ; 1 bytes @ 0x0
   558                           
   559                           
   560                           ; 4 bytes @ 0x0
   561  0020                     	ds	3
   562  0023                     ??_sprintf:	
   563                           
   564                           ; 1 bytes @ 0x3
   565  0023                     	ds	1
   566  0024                     ??_UART_Init:	
   567                           
   568                           ; 1 bytes @ 0x4
   569  0024                     	ds	2
   570  0026                     sprintf@ap:	
   571                           
   572                           ; 1 bytes @ 0x6
   573  0026                     	ds	1
   574  0027                     sprintf@prec:	
   575                           
   576                           ; 1 bytes @ 0x7
   577  0027                     	ds	1
   578  0028                     UART_Init@n:	
   579  0028                     sprintf@val:	
   580                           ; 2 bytes @ 0x8
   581                           
   582                           
   583                           ; 2 bytes @ 0x8
   584  0028                     	ds	2
   585  002A                     sprintf@flag:	
   586                           
   587                           ; 1 bytes @ 0xA
   588  002A                     	ds	1
   589  002B                     sprintf@width:	
   590                           
   591                           ; 2 bytes @ 0xB
   592  002B                     	ds	2
   593  002D                     sprintf@sp:	
   594                           
   595                           ; 1 bytes @ 0xD
   596  002D                     	ds	1
   597  002E                     sprintf@c:	
   598                           
   599                           ; 1 bytes @ 0xE
   600  002E                     	ds	1
   601  002F                     ??_main:	
   602                           
   603                           ; 1 bytes @ 0xF
   604  002F                     	ds	3
   605  0032                     main@bufferLCD:	
   606                           
   607                           ; 16 bytes @ 0x12
   608  0032                     	ds	16
   609  0042                     main@c:	
   610                           
   611                           ; 1 bytes @ 0x22
   612  0042                     	ds	1
   613  0043                     main@adc:	
   614                           
   615                           ; 2 bytes @ 0x23
   616  0043                     	ds	2
   617                           
   618                           	psect	maintext
   619  0520                     __pmaintext:	
   620 ;;
   621 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   622 ;;
   623 ;; *************** function _main *****************
   624 ;; Defined at:
   625 ;;		line 88 in file "Traffic.c"
   626 ;; Parameters:    Size  Location     Type
   627 ;;		None
   628 ;; Auto vars:     Size  Location     Type
   629 ;;  c               1   34[BANK0 ] unsigned char 
   630 ;;  bufferLCD      16   18[BANK0 ] unsigned char [16]
   631 ;;  temp            3    0        float 
   632 ;;  adc             2   35[BANK0 ] int 
   633 ;; Return value:  Size  Location     Type
   634 ;;                  1    wreg      void 
   635 ;; Registers used:
   636 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   637 ;; Tracked objects:
   638 ;;		On entry : B00/0
   639 ;;		On exit  : 300/0
   640 ;;		Unchanged: 0/0
   641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   642 ;;      Params:         0       0       0       0       0
   643 ;;      Locals:         0      19       0       0       0
   644 ;;      Temps:          0       3       0       0       0
   645 ;;      Totals:         0      22       0       0       0
   646 ;;Total ram usage:       22 bytes
   647 ;; Hardware stack levels required when called:    2
   648 ;; This function calls:
   649 ;;		_Lcd_Cmd
   650 ;;		_Lcd_Init
   651 ;;		_Lcd_Out2
   652 ;;		_UART_Data_Ready
   653 ;;		_UART_GetC
   654 ;;		_UART_Init
   655 ;;		_UART_Print
   656 ;;		_UART_PutC
   657 ;;		_readADC
   658 ;;		_sprintf
   659 ;; This function is called by:
   660 ;;		Startup code after reset
   661 ;; This function uses a non-reentrant model
   662 ;;
   663                           
   664                           
   665                           ;psect for function _main
   666  0520                     _main:	
   667                           
   668                           ;Traffic.c: 90: int adc;;Traffic.c: 91: float temp;;Traffic.c: 92: unsigned char bufferL
      +                          CD[16];;Traffic.c: 95: TRISB=0;
   669                           
   670                           ;incstack = 0
   671                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   672  0520  1683               	bsf	3,5	;RP0=1, select bank1
   673  0521  0186               	clrf	6	;volatile
   674                           
   675                           ;Traffic.c: 98: TRISCbits.TRISC6=0;
   676  0522  1307               	bcf	7,6	;volatile
   677                           
   678                           ;Traffic.c: 99: TRISCbits.TRISC7=1;
   679  0523  1787               	bsf	7,7	;volatile
   680                           
   681                           ;Traffic.c: 101: ANSELH=0;
   682  0524  1703               	bsf	3,6	;RP1=1, select bank3
   683  0525  0189               	clrf	9	;volatile
   684                           
   685                           ;Traffic.c: 102: ANSELbits.ANS0=1;
   686  0526  1408               	bsf	8,0	;volatile
   687                           
   688                           ;Traffic.c: 103: ANSELbits.ANS1=1;
   689  0527  1488               	bsf	8,1	;volatile
   690                           
   691                           ;Traffic.c: 104: ANSELbits.ANS2=1;
   692  0528  1508               	bsf	8,2	;volatile
   693                           
   694                           ;Traffic.c: 106: ADCON1=0b10000000;
   695  0529  3080               	movlw	128
   696  052A  1303               	bcf	3,6	;RP1=0, select bank1
   697  052B  009F               	movwf	31	;volatile
   698                           
   699                           ;Traffic.c: 108: ADCON0=0b10000001;
   700  052C  3081               	movlw	129
   701  052D  1283               	bcf	3,5	;RP0=0, select bank0
   702  052E  009F               	movwf	31	;volatile
   703                           
   704                           ;Traffic.c: 110: OSCCON = 0x70;
   705  052F  3070               	movlw	112
   706  0530  1683               	bsf	3,5	;RP0=1, select bank1
   707  0531  008F               	movwf	15	;volatile
   708                           
   709                           ;Traffic.c: 111: UART_Init(9600);
   710  0532  3000               	movlw	0
   711  0533  1283               	bcf	3,5	;RP0=0, select bank0
   712  0534  00A3               	movwf	UART_Init@baud_rate+3
   713  0535  3000               	movlw	0
   714  0536  00A2               	movwf	UART_Init@baud_rate+2
   715  0537  3025               	movlw	37
   716  0538  00A1               	movwf	UART_Init@baud_rate+1
   717  0539  3080               	movlw	128
   718  053A  00A0               	movwf	UART_Init@baud_rate
   719  053B  120A  118A  2284  120A  118A  	fcall	_UART_Init
   720                           
   721                           ;Traffic.c: 112: _delay((unsigned long)((2000)*(8000000/4000.0)));
   722  0540  3015               	movlw	21
   723  0541  1283               	bcf	3,5	;RP0=0, select bank0
   724  0542  1303               	bcf	3,6	;RP1=0, select bank0
   725  0543  00B1               	movwf	??_main+2
   726  0544  304B               	movlw	75
   727  0545  00B0               	movwf	??_main+1
   728  0546  30BD               	movlw	189
   729  0547  00AF               	movwf	??_main
   730  0548                     u1537:	
   731  0548  0BAF               	decfsz	??_main,f
   732  0549  2D48               	goto	u1537
   733  054A  0BB0               	decfsz	??_main+1,f
   734  054B  2D48               	goto	u1537
   735  054C  0BB1               	decfsz	??_main+2,f
   736  054D  2D48               	goto	u1537
   737  054E  2D4F               	nop2
   738                           
   739                           ;Traffic.c: 113: UART_Print(message);
   740  054F  300B               	movlw	(low ((_message-__stringbase)| (0+32768)))& (0+255)
   741  0550  00F1               	movwf	UART_Print@data
   742  0551  3080               	movlw	128
   743  0552  00F2               	movwf	UART_Print@data+1
   744  0553  120A  118A  20DB  120A  118A  	fcall	_UART_Print
   745                           
   746                           ;Traffic.c: 114: _delay((unsigned long)((1000)*(8000000/4000.0)));
   747  0558  300B               	movlw	11
   748  0559  1283               	bcf	3,5	;RP0=0, select bank0
   749  055A  1303               	bcf	3,6	;RP1=0, select bank0
   750  055B  00B1               	movwf	??_main+2
   751  055C  3026               	movlw	38
   752  055D  00B0               	movwf	??_main+1
   753  055E  305D               	movlw	93
   754  055F  00AF               	movwf	??_main
   755  0560                     u1547:	
   756  0560  0BAF               	decfsz	??_main,f
   757  0561  2D60               	goto	u1547
   758  0562  0BB0               	decfsz	??_main+1,f
   759  0563  2D60               	goto	u1547
   760  0564  0BB1               	decfsz	??_main+2,f
   761  0565  2D60               	goto	u1547
   762                           
   763                           ;Traffic.c: 116: Lcd_Init();
   764  0566  120A  118A  2314  120A  118A  	fcall	_Lcd_Init
   765                           
   766                           ;Traffic.c: 117: Lcd_Cmd(1);
   767  056B  3001               	movlw	1
   768  056C  120A  118A  23C0  120A  118A  	fcall	_Lcd_Cmd
   769                           
   770                           ;Traffic.c: 118: Lcd_Cmd(12);
   771  0571  300C               	movlw	12
   772  0572  120A  118A  23C0  120A  118A  	fcall	_Lcd_Cmd
   773                           
   774                           ;Traffic.c: 119: _delay((unsigned long)((100)*(8000000/4000.0)));
   775  0577  3002               	movlw	2
   776  0578  1283               	bcf	3,5	;RP0=0, select bank0
   777  0579  1303               	bcf	3,6	;RP1=0, select bank0
   778  057A  00B1               	movwf	??_main+2
   779  057B  3004               	movlw	4
   780  057C  00B0               	movwf	??_main+1
   781  057D  30B9               	movlw	185
   782  057E  00AF               	movwf	??_main
   783  057F                     u1557:	
   784  057F  0BAF               	decfsz	??_main,f
   785  0580  2D7F               	goto	u1557
   786  0581  0BB0               	decfsz	??_main+1,f
   787  0582  2D7F               	goto	u1557
   788  0583  0BB1               	decfsz	??_main+2,f
   789  0584  2D7F               	goto	u1557
   790  0585  2D86               	nop2
   791  0586                     l1721:	
   792                           
   793                           ;Traffic.c: 123: {;Traffic.c: 125: adc=readADC(0);
   794  0586  3000               	movlw	0
   795  0587  120A  118A  2207  120A  118A  	fcall	_readADC
   796  058C  0871               	movf	?_readADC+1,w
   797  058D  1283               	bcf	3,5	;RP0=0, select bank0
   798  058E  1303               	bcf	3,6	;RP1=0, select bank0
   799  058F  00C4               	movwf	main@adc+1
   800  0590  0870               	movf	?_readADC,w
   801  0591  00C3               	movwf	main@adc
   802                           
   803                           ;Traffic.c: 127: sprintf(bufferLCD,"Temp1 %03d ",adc);
   804  0592  3025               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   805  0593  00AF               	movwf	??_main
   806  0594  082F               	movf	??_main,w
   807  0595  00A0               	movwf	sprintf@f
   808  0596  0844               	movf	main@adc+1,w
   809  0597  00A2               	movwf	?_sprintf+2
   810  0598  0843               	movf	main@adc,w
   811  0599  00A1               	movwf	?_sprintf+1
   812  059A  3032               	movlw	(low (main@bufferLCD| 0))& (0+255)
   813  059B  120A  118A  2670  120A  118A  	fcall	_sprintf
   814                           
   815                           ;Traffic.c: 128: Lcd_Out2(1,1,bufferLCD);
   816  05A0  01F3               	clrf	Lcd_Out2@x
   817  05A1  0AF3               	incf	Lcd_Out2@x,f
   818  05A2  3032               	movlw	(low (main@bufferLCD| 0))& (0+255)
   819  05A3  00AF               	movwf	??_main
   820  05A4  082F               	movf	??_main,w
   821  05A5  00F4               	movwf	Lcd_Out2@buffer
   822  05A6  3001               	movlw	1
   823  05A7  120A  118A  2135  120A  118A  	fcall	_Lcd_Out2
   824                           
   825                           ;Traffic.c: 129: UART_Print(bufferLCD);
   826  05AC  3032               	movlw	(low (main@bufferLCD| 0))& (0+255)
   827  05AD  00F1               	movwf	UART_Print@data
   828  05AE  3000               	movlw	0
   829  05AF  00F2               	movwf	UART_Print@data+1
   830  05B0  120A  118A  20DB  120A  118A  	fcall	_UART_Print
   831                           
   832                           ;Traffic.c: 130: _delay((unsigned long)((1000)*(8000000/4000.0)));
   833  05B5  300B               	movlw	11
   834  05B6  1283               	bcf	3,5	;RP0=0, select bank0
   835  05B7  1303               	bcf	3,6	;RP1=0, select bank0
   836  05B8  00B1               	movwf	??_main+2
   837  05B9  3026               	movlw	38
   838  05BA  00B0               	movwf	??_main+1
   839  05BB  305D               	movlw	93
   840  05BC  00AF               	movwf	??_main
   841  05BD                     u1567:	
   842  05BD  0BAF               	decfsz	??_main,f
   843  05BE  2DBD               	goto	u1567
   844  05BF  0BB0               	decfsz	??_main+1,f
   845  05C0  2DBD               	goto	u1567
   846  05C1  0BB1               	decfsz	??_main+2,f
   847  05C2  2DBD               	goto	u1567
   848                           
   849                           ;Traffic.c: 131: UART_Print(",");
   850  05C3  3046               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   851  05C4  00F1               	movwf	UART_Print@data
   852  05C5  3080               	movlw	128
   853  05C6  00F2               	movwf	UART_Print@data+1
   854  05C7  120A  118A  20DB  120A  118A  	fcall	_UART_Print
   855                           
   856                           ;Traffic.c: 133: adc=readADC(1);
   857  05CC  3001               	movlw	1
   858  05CD  120A  118A  2207  120A  118A  	fcall	_readADC
   859  05D2  0871               	movf	?_readADC+1,w
   860  05D3  1283               	bcf	3,5	;RP0=0, select bank0
   861  05D4  1303               	bcf	3,6	;RP1=0, select bank0
   862  05D5  00C4               	movwf	main@adc+1
   863  05D6  0870               	movf	?_readADC,w
   864  05D7  00C3               	movwf	main@adc
   865                           
   866                           ;Traffic.c: 135: sprintf(bufferLCD,"T2 %03d ",adc);
   867  05D8  3031               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   868  05D9  00AF               	movwf	??_main
   869  05DA  082F               	movf	??_main,w
   870  05DB  00A0               	movwf	sprintf@f
   871  05DC  0844               	movf	main@adc+1,w
   872  05DD  00A2               	movwf	?_sprintf+2
   873  05DE  0843               	movf	main@adc,w
   874  05DF  00A1               	movwf	?_sprintf+1
   875  05E0  3032               	movlw	(low (main@bufferLCD| 0))& (0+255)
   876  05E1  120A  118A  2670  120A  118A  	fcall	_sprintf
   877                           
   878                           ;Traffic.c: 136: Lcd_Out2(2,1,bufferLCD);
   879  05E6  01F3               	clrf	Lcd_Out2@x
   880  05E7  0AF3               	incf	Lcd_Out2@x,f
   881  05E8  3032               	movlw	(low (main@bufferLCD| 0))& (0+255)
   882  05E9  00AF               	movwf	??_main
   883  05EA  082F               	movf	??_main,w
   884  05EB  00F4               	movwf	Lcd_Out2@buffer
   885  05EC  3002               	movlw	2
   886  05ED  120A  118A  2135  120A  118A  	fcall	_Lcd_Out2
   887                           
   888                           ;Traffic.c: 137: UART_Print(bufferLCD);
   889  05F2  3032               	movlw	(low (main@bufferLCD| 0))& (0+255)
   890  05F3  00F1               	movwf	UART_Print@data
   891  05F4  3000               	movlw	0
   892  05F5  00F2               	movwf	UART_Print@data+1
   893  05F6  120A  118A  20DB  120A  118A  	fcall	_UART_Print
   894                           
   895                           ;Traffic.c: 138: _delay((unsigned long)((1000)*(8000000/4000.0)));
   896  05FB  300B               	movlw	11
   897  05FC  1283               	bcf	3,5	;RP0=0, select bank0
   898  05FD  1303               	bcf	3,6	;RP1=0, select bank0
   899  05FE  00B1               	movwf	??_main+2
   900  05FF  3026               	movlw	38
   901  0600  00B0               	movwf	??_main+1
   902  0601  305D               	movlw	93
   903  0602  00AF               	movwf	??_main
   904  0603                     u1577:	
   905  0603  0BAF               	decfsz	??_main,f
   906  0604  2E03               	goto	u1577
   907  0605  0BB0               	decfsz	??_main+1,f
   908  0606  2E03               	goto	u1577
   909  0607  0BB1               	decfsz	??_main+2,f
   910  0608  2E03               	goto	u1577
   911                           
   912                           ;Traffic.c: 139: UART_Print(",");
   913  0609  3046               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   914  060A  00F1               	movwf	UART_Print@data
   915  060B  3080               	movlw	128
   916  060C  00F2               	movwf	UART_Print@data+1
   917  060D  120A  118A  20DB  120A  118A  	fcall	_UART_Print
   918                           
   919                           ;Traffic.c: 141: adc=readADC(2);
   920  0612  3002               	movlw	2
   921  0613  120A  118A  2207  120A  118A  	fcall	_readADC
   922  0618  0871               	movf	?_readADC+1,w
   923  0619  1283               	bcf	3,5	;RP0=0, select bank0
   924  061A  1303               	bcf	3,6	;RP1=0, select bank0
   925  061B  00C4               	movwf	main@adc+1
   926  061C  0870               	movf	?_readADC,w
   927  061D  00C3               	movwf	main@adc
   928                           
   929                           ;Traffic.c: 143: sprintf(bufferLCD,"T3 %03d ",adc);
   930  061E  303A               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   931  061F  00AF               	movwf	??_main
   932  0620  082F               	movf	??_main,w
   933  0621  00A0               	movwf	sprintf@f
   934  0622  0844               	movf	main@adc+1,w
   935  0623  00A2               	movwf	?_sprintf+2
   936  0624  0843               	movf	main@adc,w
   937  0625  00A1               	movwf	?_sprintf+1
   938  0626  3032               	movlw	(low (main@bufferLCD| 0))& (0+255)
   939  0627  120A  118A  2670  120A  118A  	fcall	_sprintf
   940                           
   941                           ;Traffic.c: 144: Lcd_Out2(2,8,bufferLCD);
   942  062C  3008               	movlw	8
   943  062D  00AF               	movwf	??_main
   944  062E  082F               	movf	??_main,w
   945  062F  00F3               	movwf	Lcd_Out2@x
   946  0630  3032               	movlw	(low (main@bufferLCD| 0))& (0+255)
   947  0631  00B0               	movwf	??_main+1
   948  0632  0830               	movf	??_main+1,w
   949  0633  00F4               	movwf	Lcd_Out2@buffer
   950  0634  3002               	movlw	2
   951  0635  120A  118A  2135  120A  118A  	fcall	_Lcd_Out2
   952                           
   953                           ;Traffic.c: 145: UART_Print(bufferLCD);
   954  063A  3032               	movlw	(low (main@bufferLCD| 0))& (0+255)
   955  063B  00F1               	movwf	UART_Print@data
   956  063C  3000               	movlw	0
   957  063D  00F2               	movwf	UART_Print@data+1
   958  063E  120A  118A  20DB  120A  118A  	fcall	_UART_Print
   959                           
   960                           ;Traffic.c: 146: _delay((unsigned long)((1000)*(8000000/4000.0)));
   961  0643  300B               	movlw	11
   962  0644  1283               	bcf	3,5	;RP0=0, select bank0
   963  0645  1303               	bcf	3,6	;RP1=0, select bank0
   964  0646  00B1               	movwf	??_main+2
   965  0647  3026               	movlw	38
   966  0648  00B0               	movwf	??_main+1
   967  0649  305D               	movlw	93
   968  064A  00AF               	movwf	??_main
   969  064B                     u1587:	
   970  064B  0BAF               	decfsz	??_main,f
   971  064C  2E4B               	goto	u1587
   972  064D  0BB0               	decfsz	??_main+1,f
   973  064E  2E4B               	goto	u1587
   974  064F  0BB1               	decfsz	??_main+2,f
   975  0650  2E4B               	goto	u1587
   976                           
   977                           ;Traffic.c: 147: UART_Print("\r\n");
   978  0651  3043               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
   979  0652  00F1               	movwf	UART_Print@data
   980  0653  3080               	movlw	128
   981  0654  00F2               	movwf	UART_Print@data+1
   982  0655  120A  118A  20DB  120A  118A  	fcall	_UART_Print
   983                           
   984                           ;Traffic.c: 150: if ( UART_Data_Ready() ){
   985  065A  120A  118A  2096  120A  118A  	fcall	_UART_Data_Ready
   986  065F  1C03               	btfss	3,0
   987  0660  2D86               	goto	l1721
   988                           
   989                           ;Traffic.c: 152: uint8_t c = UART_GetC();
   990  0661  120A  118A  209C  120A  118A  	fcall	_UART_GetC
   991  0666  00AF               	movwf	??_main
   992  0667  082F               	movf	??_main,w
   993  0668  00C2               	movwf	main@c
   994                           
   995                           ;Traffic.c: 153: UART_PutC(c);
   996  0669  0842               	movf	main@c,w
   997  066A  120A  118A  20A4  120A  118A  	fcall	_UART_PutC
   998  066F  2D86               	goto	l1721
   999  0670                     __end_of_main:	
  1000                           
  1001                           	psect	text1
  1002  0670                     __ptext1:	
  1003 ;; *************** function _sprintf *****************
  1004 ;; Defined at:
  1005 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  1006 ;; Parameters:    Size  Location     Type
  1007 ;;  sp              1    wreg     PTR unsigned char 
  1008 ;;		 -> main@bufferLCD(16), 
  1009 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  1010 ;;		 -> STR_5(9), STR_3(9), STR_1(12), 
  1011 ;; Auto vars:     Size  Location     Type
  1012 ;;  sp              1   13[BANK0 ] PTR unsigned char 
  1013 ;;		 -> main@bufferLCD(16), 
  1014 ;;  tmpval          4    0        struct .
  1015 ;;  width           2   11[BANK0 ] int 
  1016 ;;  val             2    8[BANK0 ] unsigned int 
  1017 ;;  cp              2    0        PTR const unsigned char 
  1018 ;;  len             2    0        unsigned int 
  1019 ;;  c               1   14[BANK0 ] unsigned char 
  1020 ;;  flag            1   10[BANK0 ] unsigned char 
  1021 ;;  prec            1    7[BANK0 ] char 
  1022 ;;  ap              1    6[BANK0 ] PTR void [1]
  1023 ;;		 -> ?_sprintf(2), 
  1024 ;; Return value:  Size  Location     Type
  1025 ;;                  2    0[BANK0 ] int 
  1026 ;; Registers used:
  1027 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1028 ;; Tracked objects:
  1029 ;;		On entry : 300/0
  1030 ;;		On exit  : B00/0
  1031 ;;		Unchanged: 0/0
  1032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1033 ;;      Params:         0       3       0       0       0
  1034 ;;      Locals:         0       9       0       0       0
  1035 ;;      Temps:          0       3       0       0       0
  1036 ;;      Totals:         0      15       0       0       0
  1037 ;;Total ram usage:       15 bytes
  1038 ;; Hardware stack levels used:    1
  1039 ;; Hardware stack levels required when called:    1
  1040 ;; This function calls:
  1041 ;;		___lwdiv
  1042 ;;		___lwmod
  1043 ;;		___wmul
  1044 ;;		_isdigit
  1045 ;; This function is called by:
  1046 ;;		_main
  1047 ;; This function uses a non-reentrant model
  1048 ;;
  1049                           
  1050                           
  1051                           ;psect for function _sprintf
  1052  0670                     _sprintf:	
  1053                           
  1054                           ;incstack = 0
  1055                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1056                           ;sprintf@sp stored from wreg
  1057  0670  00AD               	movwf	sprintf@sp
  1058                           
  1059                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          16: signed char prec;;doprnt.c: 520: unsigned char flag;;doprnt.c: 535: union {;doprnt.c
      +                          : 536: unsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c:
      +                           540: unsigned int val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;dop
      +                          rnt.c: 545: *ap = __va_start();
  1060  0671  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1061  0672  00A3               	movwf	??_sprintf
  1062  0673  0823               	movf	??_sprintf,w
  1063  0674  00A6               	movwf	sprintf@ap
  1064  0675                     l1681:	
  1065                           ;doprnt.c: 548: while((c = *f++)) {
  1066                           
  1067  0675  3001               	movlw	1
  1068  0676  07A0               	addwf	sprintf@f,f
  1069  0677  30FF               	movlw	-1
  1070  0678  0720               	addwf	sprintf@f,w
  1071  0679  0084               	movwf	4
  1072  067A  120A  118A  200D  120A  118A  	fcall	stringdir
  1073  067F  00A3               	movwf	??_sprintf
  1074  0680  0823               	movf	??_sprintf,w
  1075  0681  00AE               	movwf	sprintf@c
  1076  0682  082E               	movf	sprintf@c,w
  1077  0683  1903               	btfsc	3,2
  1078  0684  2FF7               	goto	l1683
  1079                           
  1080                           ;doprnt.c: 550: if(c != '%')
  1081  0685  3025               	movlw	37
  1082  0686  062E               	xorwf	sprintf@c,w
  1083  0687  1903               	btfsc	3,2
  1084  0688  2E95               	goto	l1585
  1085                           
  1086                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  1087  0689  082E               	movf	sprintf@c,w
  1088  068A  00A3               	movwf	??_sprintf
  1089  068B  082D               	movf	sprintf@sp,w
  1090  068C  0084               	movwf	4
  1091  068D  0823               	movf	??_sprintf,w
  1092  068E  1383               	bcf	3,7	;select IRP bank0
  1093  068F  0080               	movwf	0
  1094  0690  3001               	movlw	1
  1095  0691  00A3               	movwf	??_sprintf
  1096  0692  0823               	movf	??_sprintf,w
  1097  0693  07AD               	addwf	sprintf@sp,f
  1098                           
  1099                           ;doprnt.c: 554: continue;
  1100  0694  2E75               	goto	l1681
  1101  0695                     l1585:	
  1102                           
  1103                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  1104  0695  01AB               	clrf	sprintf@width
  1105  0696  01AC               	clrf	sprintf@width+1
  1106                           
  1107                           ;doprnt.c: 560: flag = 0;
  1108  0697  01AA               	clrf	sprintf@flag
  1109  0698  2E9E               	goto	l1591
  1110  0699                     l246:	
  1111                           ;doprnt.c: 591: case '0':
  1112                           
  1113                           
  1114                           ;doprnt.c: 592: flag |= 0x04;
  1115  0699  152A               	bsf	sprintf@flag,2
  1116                           
  1117                           ;doprnt.c: 593: f++;
  1118  069A  3001               	movlw	1
  1119  069B  00A3               	movwf	??_sprintf
  1120  069C  0823               	movf	??_sprintf,w
  1121  069D  07A0               	addwf	sprintf@f,f
  1122  069E                     l1591:	
  1123                           ;doprnt.c: 594: continue;
  1124                           
  1125  069E  0820               	movf	sprintf@f,w
  1126  069F  0084               	movwf	4
  1127  06A0  120A  118A  200D  120A  118A  	fcall	stringdir
  1128                           
  1129                           ; Switch size 1, requested type "simple"
  1130                           ; Number of cases is 1, Range of values is 48 to 48
  1131                           ; switch strategies available:
  1132                           ; Name         Instructions Cycles
  1133                           ; simple_byte            4     3 (average)
  1134                           ; direct_byte           14    11 (fixed)
  1135                           ; jumptable            263     9 (fixed)
  1136                           ;	Chosen strategy is simple_byte
  1137  06A5  3A30               	xorlw	48	; case 48
  1138  06A6  1903               	skipnz
  1139  06A7  2E99               	goto	l246
  1140  06A8  2EA9               	goto	l1593
  1141  06A9                     l1593:	
  1142                           
  1143                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  1144  06A9  0820               	movf	sprintf@f,w
  1145  06AA  0084               	movwf	4
  1146  06AB  120A  118A  200D  120A  118A  	fcall	stringdir
  1147  06B0  120A  118A  20AC  120A  118A  	fcall	_isdigit
  1148  06B5  1C03               	btfss	3,0
  1149  06B6  2EEF               	goto	l1607
  1150                           
  1151                           ;doprnt.c: 610: width = 0;
  1152  06B7  01AB               	clrf	sprintf@width
  1153  06B8  01AC               	clrf	sprintf@width+1
  1154  06B9                     l1597:	
  1155                           
  1156                           ;doprnt.c: 612: width *= 10;
  1157  06B9  300A               	movlw	10
  1158  06BA  00F0               	movwf	___wmul@multiplier
  1159  06BB  3000               	movlw	0
  1160  06BC  00F1               	movwf	___wmul@multiplier+1
  1161  06BD  082C               	movf	sprintf@width+1,w
  1162  06BE  00F3               	movwf	___wmul@multiplicand+1
  1163  06BF  082B               	movf	sprintf@width,w
  1164  06C0  00F2               	movwf	___wmul@multiplicand
  1165  06C1  120A  118A  20BA  120A  118A  	fcall	___wmul
  1166  06C6  0871               	movf	?___wmul+1,w
  1167  06C7  00AC               	movwf	sprintf@width+1
  1168  06C8  0870               	movf	?___wmul,w
  1169  06C9  00AB               	movwf	sprintf@width
  1170                           
  1171                           ;doprnt.c: 613: width += *f++ - '0';
  1172  06CA  0820               	movf	sprintf@f,w
  1173  06CB  0084               	movwf	4
  1174  06CC  120A  118A  200D  120A  118A  	fcall	stringdir
  1175  06D1  3ED0               	addlw	208
  1176  06D2  00A3               	movwf	??_sprintf
  1177  06D3  30FF               	movlw	255
  1178  06D4  1803               	skipnc
  1179  06D5  3000               	movlw	0
  1180  06D6  00A4               	movwf	??_sprintf+1
  1181  06D7  0823               	movf	??_sprintf,w
  1182  06D8  07AB               	addwf	sprintf@width,f
  1183  06D9  1803               	skipnc
  1184  06DA  0AAC               	incf	sprintf@width+1,f
  1185  06DB  0824               	movf	??_sprintf+1,w
  1186  06DC  07AC               	addwf	sprintf@width+1,f
  1187  06DD  3001               	movlw	1
  1188  06DE  00A3               	movwf	??_sprintf
  1189  06DF  0823               	movf	??_sprintf,w
  1190  06E0  07A0               	addwf	sprintf@f,f
  1191                           
  1192                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  1193  06E1  0820               	movf	sprintf@f,w
  1194  06E2  0084               	movwf	4
  1195  06E3  120A  118A  200D  120A  118A  	fcall	stringdir
  1196  06E8  120A  118A  20AC  120A  118A  	fcall	_isdigit
  1197  06ED  1803               	btfsc	3,0
  1198  06EE  2EB9               	goto	l1597
  1199  06EF                     l1607:	
  1200  06EF  3001               	movlw	1
  1201  06F0  07A0               	addwf	sprintf@f,f
  1202  06F1  30FF               	movlw	-1
  1203  06F2  0720               	addwf	sprintf@f,w
  1204  06F3  0084               	movwf	4
  1205  06F4  120A  118A  200D  120A  118A  	fcall	stringdir
  1206  06F9  00AE               	movwf	sprintf@c
  1207                           
  1208                           ; Switch size 1, requested type "simple"
  1209                           ; Number of cases is 3, Range of values is 0 to 105
  1210                           ; switch strategies available:
  1211                           ; Name         Instructions Cycles
  1212                           ; simple_byte           10     6 (average)
  1213                           ; jumptable            260     6 (fixed)
  1214                           ;	Chosen strategy is simple_byte
  1215  06FA  3A00               	xorlw	0	; case 0
  1216  06FB  1903               	skipnz
  1217  06FC  2FF7               	goto	l1683
  1218  06FD  3A64               	xorlw	100	; case 100
  1219  06FE  1903               	skipnz
  1220  06FF  2F04               	goto	l1609
  1221  0700  3A0D               	xorlw	13	; case 105
  1222  0701  1903               	skipnz
  1223  0702  2F04               	goto	l1609
  1224  0703  2E75               	goto	l1681
  1225  0704                     l1609:	
  1226                           
  1227                           ;doprnt.c: 1272: {;doprnt.c: 1278: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1228  0704  0826               	movf	sprintf@ap,w
  1229  0705  0084               	movwf	4
  1230  0706  1383               	bcf	3,7	;select IRP bank0
  1231  0707  0800               	movf	0,w
  1232  0708  00A8               	movwf	sprintf@val
  1233  0709  0A84               	incf	4,f
  1234  070A  0800               	movf	0,w
  1235  070B  00A9               	movwf	sprintf@val+1
  1236  070C  3002               	movlw	2
  1237  070D  00A3               	movwf	??_sprintf
  1238  070E  0823               	movf	??_sprintf,w
  1239  070F  07A6               	addwf	sprintf@ap,f
  1240                           
  1241                           ;doprnt.c: 1280: if((int)val < 0) {
  1242  0710  1FA9               	btfss	sprintf@val+1,7
  1243  0711  2F1B               	goto	l1619
  1244                           
  1245                           ;doprnt.c: 1281: flag |= 0x03;
  1246  0712  3003               	movlw	3
  1247  0713  00A3               	movwf	??_sprintf
  1248  0714  0823               	movf	??_sprintf,w
  1249  0715  04AA               	iorwf	sprintf@flag,f
  1250                           
  1251                           ;doprnt.c: 1282: val = -val;
  1252  0716  09A8               	comf	sprintf@val,f
  1253  0717  09A9               	comf	sprintf@val+1,f
  1254  0718  0AA8               	incf	sprintf@val,f
  1255  0719  1903               	skipnz
  1256  071A  0AA9               	incf	sprintf@val+1,f
  1257  071B                     l1619:	
  1258                           
  1259                           ;doprnt.c: 1283: };doprnt.c: 1285: };doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/siz
      +                          eof dpowers[0] ; c++)
  1260  071B  01AE               	clrf	sprintf@c
  1261  071C  0AAE               	incf	sprintf@c,f
  1262  071D                     l1625:	
  1263                           
  1264                           ;doprnt.c: 1325: if(val < dpowers[c])
  1265  071D  082E               	movf	sprintf@c,w
  1266  071E  00A3               	movwf	??_sprintf
  1267  071F  0723               	addwf	??_sprintf,w
  1268  0720  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1269  0721  0084               	movwf	4
  1270  0722  120A  118A  200D  120A  118A  	fcall	stringdir
  1271  0727  00A4               	movwf	??_sprintf+1
  1272  0728  120A  118A  200D  120A  118A  	fcall	stringdir
  1273  072D  00A5               	movwf	??_sprintf+2
  1274  072E  0825               	movf	??_sprintf+2,w
  1275  072F  0229               	subwf	sprintf@val+1,w
  1276  0730  1D03               	skipz
  1277  0731  2F34               	goto	u1385
  1278  0732  0824               	movf	??_sprintf+1,w
  1279  0733  0228               	subwf	sprintf@val,w
  1280  0734                     u1385:	
  1281  0734  1C03               	btfss	3,0
  1282  0735  2F3E               	goto	l1631
  1283  0736  3001               	movlw	1
  1284  0737  00A3               	movwf	??_sprintf
  1285  0738  0823               	movf	??_sprintf,w
  1286  0739  07AE               	addwf	sprintf@c,f
  1287  073A  3005               	movlw	5
  1288  073B  062E               	xorwf	sprintf@c,w
  1289  073C  1D03               	btfss	3,2
  1290  073D  2F1D               	goto	l1625
  1291  073E                     l1631:	
  1292                           
  1293                           ;doprnt.c: 1364: if(width && flag & 0x03)
  1294  073E  082B               	movf	sprintf@width,w
  1295  073F  042C               	iorwf	sprintf@width+1,w
  1296  0740  1903               	btfsc	3,2
  1297  0741  2F4C               	goto	l264
  1298  0742  082A               	movf	sprintf@flag,w
  1299  0743  3903               	andlw	3
  1300  0744  1903               	btfsc	3,2
  1301  0745  2F4C               	goto	l264
  1302                           
  1303                           ;doprnt.c: 1365: width--;
  1304  0746  30FF               	movlw	255
  1305  0747  07AB               	addwf	sprintf@width,f
  1306  0748  1803               	skipnc
  1307  0749  0AAC               	incf	sprintf@width+1,f
  1308  074A  30FF               	movlw	255
  1309  074B  07AC               	addwf	sprintf@width+1,f
  1310  074C                     l264:	
  1311                           
  1312                           ;doprnt.c: 1400: if(width > c)
  1313  074C  082C               	movf	sprintf@width+1,w
  1314  074D  3A80               	xorlw	128
  1315  074E  3C80               	sublw	128
  1316  074F  1D03               	skipz
  1317  0750  2F53               	goto	u1425
  1318  0751  082B               	movf	sprintf@width,w
  1319  0752  022E               	subwf	sprintf@c,w
  1320  0753                     u1425:	
  1321  0753  1803               	skipnc
  1322  0754  2F61               	goto	l1639
  1323                           
  1324                           ;doprnt.c: 1401: width -= c;
  1325  0755  1283               	bcf	3,5	;RP0=0, select bank0
  1326  0756  1303               	bcf	3,6	;RP1=0, select bank0
  1327  0757  082E               	movf	sprintf@c,w
  1328  0758  00A3               	movwf	??_sprintf
  1329  0759  01A4               	clrf	??_sprintf+1
  1330  075A  0823               	movf	??_sprintf,w
  1331  075B  02AB               	subwf	sprintf@width,f
  1332  075C  0824               	movf	??_sprintf+1,w
  1333  075D  1C03               	skipc
  1334  075E  03AC               	decf	sprintf@width+1,f
  1335  075F  02AC               	subwf	sprintf@width+1,f
  1336  0760  2F65               	goto	l1641
  1337  0761                     l1639:	
  1338                           
  1339                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  1340  0761  1283               	bcf	3,5	;RP0=0, select bank0
  1341  0762  1303               	bcf	3,6	;RP1=0, select bank0
  1342  0763  01AB               	clrf	sprintf@width
  1343  0764  01AC               	clrf	sprintf@width+1
  1344  0765                     l1641:	
  1345                           
  1346                           ;doprnt.c: 1406: if(flag & 0x04) {
  1347  0765  1D2A               	btfss	sprintf@flag,2
  1348  0766  2F8C               	goto	l1657
  1349                           
  1350                           ;doprnt.c: 1411: if(flag & 0x03)
  1351  0767  082A               	movf	sprintf@flag,w
  1352  0768  3903               	andlw	3
  1353  0769  1903               	btfsc	3,2
  1354  076A  2F76               	goto	l1649
  1355                           
  1356                           ;doprnt.c: 1412: ((*sp++ = ('-')));
  1357  076B  302D               	movlw	45
  1358  076C  00A3               	movwf	??_sprintf
  1359  076D  082D               	movf	sprintf@sp,w
  1360  076E  0084               	movwf	4
  1361  076F  0823               	movf	??_sprintf,w
  1362  0770  1383               	bcf	3,7	;select IRP bank0
  1363  0771  0080               	movwf	0
  1364  0772  3001               	movlw	1
  1365  0773  00A3               	movwf	??_sprintf
  1366  0774  0823               	movf	??_sprintf,w
  1367  0775  07AD               	addwf	sprintf@sp,f
  1368  0776                     l1649:	
  1369                           
  1370                           ;doprnt.c: 1434: if(width)
  1371  0776  082B               	movf	sprintf@width,w
  1372  0777  042C               	iorwf	sprintf@width+1,w
  1373  0778  1903               	btfsc	3,2
  1374  0779  2FB4               	goto	l1671
  1375                           
  1376                           ;doprnt.c: 1436: ((*sp++ = ('0')));
  1377  077A  3030               	movlw	48
  1378  077B  00A3               	movwf	??_sprintf
  1379  077C  082D               	movf	sprintf@sp,w
  1380  077D  0084               	movwf	4
  1381  077E  0823               	movf	??_sprintf,w
  1382  077F  1383               	bcf	3,7	;select IRP bank0
  1383  0780  0080               	movwf	0
  1384  0781  3001               	movlw	1
  1385  0782  00A3               	movwf	??_sprintf
  1386  0783  0823               	movf	??_sprintf,w
  1387  0784  07AD               	addwf	sprintf@sp,f
  1388                           
  1389                           ;doprnt.c: 1437: while(--width);
  1390  0785  30FF               	movlw	255
  1391  0786  07AB               	addwf	sprintf@width,f
  1392  0787  1803               	skipnc
  1393  0788  0AAC               	incf	sprintf@width+1,f
  1394  0789  30FF               	movlw	255
  1395  078A  07AC               	addwf	sprintf@width+1,f
  1396  078B  2F76               	goto	l1649
  1397  078C                     l1657:	
  1398                           
  1399                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1447: )
  1400  078C  082B               	movf	sprintf@width,w
  1401  078D  042C               	iorwf	sprintf@width+1,w
  1402  078E  1903               	btfsc	3,2
  1403  078F  2FA5               	goto	l1665
  1404  0790                     l1659:	
  1405                           
  1406                           ;doprnt.c: 1449: ((*sp++ = (' ')));
  1407  0790  3020               	movlw	32
  1408  0791  00A3               	movwf	??_sprintf
  1409  0792  082D               	movf	sprintf@sp,w
  1410  0793  0084               	movwf	4
  1411  0794  0823               	movf	??_sprintf,w
  1412  0795  1383               	bcf	3,7	;select IRP bank0
  1413  0796  0080               	movwf	0
  1414  0797  3001               	movlw	1
  1415  0798  00A3               	movwf	??_sprintf
  1416  0799  0823               	movf	??_sprintf,w
  1417  079A  07AD               	addwf	sprintf@sp,f
  1418                           
  1419                           ;doprnt.c: 1450: while(--width);
  1420  079B  30FF               	movlw	255
  1421  079C  07AB               	addwf	sprintf@width,f
  1422  079D  1803               	skipnc
  1423  079E  0AAC               	incf	sprintf@width+1,f
  1424  079F  30FF               	movlw	255
  1425  07A0  07AC               	addwf	sprintf@width+1,f
  1426  07A1  082B               	movf	sprintf@width,w
  1427  07A2  042C               	iorwf	sprintf@width+1,w
  1428  07A3  1D03               	btfss	3,2
  1429  07A4  2F90               	goto	l1659
  1430  07A5                     l1665:	
  1431                           
  1432                           ;doprnt.c: 1457: if(flag & 0x03)
  1433  07A5  082A               	movf	sprintf@flag,w
  1434  07A6  3903               	andlw	3
  1435  07A7  1903               	btfsc	3,2
  1436  07A8  2FB4               	goto	l1671
  1437                           
  1438                           ;doprnt.c: 1458: ((*sp++ = ('-')));
  1439  07A9  302D               	movlw	45
  1440  07AA  00A3               	movwf	??_sprintf
  1441  07AB  082D               	movf	sprintf@sp,w
  1442  07AC  0084               	movwf	4
  1443  07AD  0823               	movf	??_sprintf,w
  1444  07AE  1383               	bcf	3,7	;select IRP bank0
  1445  07AF  0080               	movwf	0
  1446  07B0  3001               	movlw	1
  1447  07B1  00A3               	movwf	??_sprintf
  1448  07B2  0823               	movf	??_sprintf,w
  1449  07B3  07AD               	addwf	sprintf@sp,f
  1450  07B4                     l1671:	
  1451                           
  1452                           ;doprnt.c: 1488: };doprnt.c: 1491: prec = c;
  1453  07B4  082E               	movf	sprintf@c,w
  1454  07B5  00A3               	movwf	??_sprintf
  1455  07B6  0823               	movf	??_sprintf,w
  1456  07B7  00A7               	movwf	sprintf@prec
  1457  07B8                     l1679:	
  1458                           ;doprnt.c: 1493: while(prec--) {
  1459                           
  1460  07B8  30FF               	movlw	255
  1461  07B9  00A3               	movwf	??_sprintf
  1462  07BA  0823               	movf	??_sprintf,w
  1463  07BB  07A7               	addwf	sprintf@prec,f
  1464  07BC  0A27               	incf	sprintf@prec,w
  1465  07BD  1903               	btfsc	3,2
  1466  07BE  2E75               	goto	l1681
  1467                           
  1468                           ;doprnt.c: 1497: {;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  1469  07BF  300A               	movlw	10
  1470  07C0  00F8               	movwf	___lwmod@divisor
  1471  07C1  3000               	movlw	0
  1472  07C2  00F9               	movwf	___lwmod@divisor+1
  1473  07C3  0827               	movf	sprintf@prec,w
  1474  07C4  00A3               	movwf	??_sprintf
  1475  07C5  0723               	addwf	??_sprintf,w
  1476  07C6  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1477  07C7  0084               	movwf	4
  1478  07C8  120A  118A  200D  120A  118A  	fcall	stringdir
  1479  07CD  00F0               	movwf	___lwdiv@divisor
  1480  07CE  120A  118A  200D  120A  118A  	fcall	stringdir
  1481  07D3  00F1               	movwf	___lwdiv@divisor+1
  1482  07D4  0829               	movf	sprintf@val+1,w
  1483  07D5  00F3               	movwf	___lwdiv@dividend+1
  1484  07D6  0828               	movf	sprintf@val,w
  1485  07D7  00F2               	movwf	___lwdiv@dividend
  1486  07D8  120A  118A  216D  120A  118A  	fcall	___lwdiv
  1487  07DD  0871               	movf	?___lwdiv+1,w
  1488  07DE  00FB               	movwf	___lwmod@dividend+1
  1489  07DF  0870               	movf	?___lwdiv,w
  1490  07E0  00FA               	movwf	___lwmod@dividend
  1491  07E1  120A  118A  2103  120A  118A  	fcall	___lwmod
  1492  07E6  0878               	movf	?___lwmod,w
  1493  07E7  3E30               	addlw	48
  1494  07E8  00A4               	movwf	??_sprintf+1
  1495  07E9  0824               	movf	??_sprintf+1,w
  1496  07EA  00AE               	movwf	sprintf@c
  1497                           
  1498                           ;doprnt.c: 1542: };doprnt.c: 1543: ((*sp++ = (c)));
  1499  07EB  082E               	movf	sprintf@c,w
  1500  07EC  00A3               	movwf	??_sprintf
  1501  07ED  082D               	movf	sprintf@sp,w
  1502  07EE  0084               	movwf	4
  1503  07EF  0823               	movf	??_sprintf,w
  1504  07F0  1383               	bcf	3,7	;select IRP bank0
  1505  07F1  0080               	movwf	0
  1506  07F2  3001               	movlw	1
  1507  07F3  00A3               	movwf	??_sprintf
  1508  07F4  0823               	movf	??_sprintf,w
  1509  07F5  07AD               	addwf	sprintf@sp,f
  1510  07F6  2FB8               	goto	l1679
  1511  07F7                     l1683:	
  1512                           
  1513                           ;doprnt.c: 1557: *sp = 0;
  1514  07F7  082D               	movf	sprintf@sp,w
  1515  07F8  0084               	movwf	4
  1516  07F9  1383               	bcf	3,7	;select IRP bank0
  1517  07FA  0180               	clrf	0
  1518  07FB  0008               	return
  1519  07FC                     __end_of_sprintf:	
  1520                           
  1521                           	psect	text2
  1522  00AC                     __ptext2:	
  1523 ;; *************** function _isdigit *****************
  1524 ;; Defined at:
  1525 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\isdigit.c"
  1526 ;; Parameters:    Size  Location     Type
  1527 ;;  c               1    wreg     unsigned char 
  1528 ;; Auto vars:     Size  Location     Type
  1529 ;;  c               1    1[COMMON] unsigned char 
  1530 ;; Return value:  Size  Location     Type
  1531 ;;		None               void
  1532 ;; Registers used:
  1533 ;;		wreg, status,2, status,0
  1534 ;; Tracked objects:
  1535 ;;		On entry : 300/0
  1536 ;;		On exit  : 300/0
  1537 ;;		Unchanged: 300/0
  1538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1539 ;;      Params:         0       0       0       0       0
  1540 ;;      Locals:         2       0       0       0       0
  1541 ;;      Temps:          0       0       0       0       0
  1542 ;;      Totals:         2       0       0       0       0
  1543 ;;Total ram usage:        2 bytes
  1544 ;; Hardware stack levels used:    1
  1545 ;; This function calls:
  1546 ;;		Nothing
  1547 ;; This function is called by:
  1548 ;;		_sprintf
  1549 ;; This function uses a non-reentrant model
  1550 ;;
  1551                           
  1552                           
  1553                           ;psect for function _isdigit
  1554  00AC                     _isdigit:	
  1555                           
  1556                           ;incstack = 0
  1557                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  1558                           ;isdigit@c stored from wreg
  1559  00AC  00F1               	movwf	isdigit@c
  1560  00AD  01F0               	clrf	_isdigit$717
  1561  00AE  303A               	movlw	58
  1562  00AF  0271               	subwf	isdigit@c,w
  1563  00B0  1803               	skipnc
  1564  00B1  28B8               	goto	l1329
  1565  00B2  3030               	movlw	48
  1566  00B3  0271               	subwf	isdigit@c,w
  1567  00B4  1C03               	skipc
  1568  00B5  28B8               	goto	l1329
  1569  00B6  01F0               	clrf	_isdigit$717
  1570  00B7  0AF0               	incf	_isdigit$717,f
  1571  00B8                     l1329:	
  1572  00B8  0C70               	rrf	_isdigit$717,w
  1573  00B9  0008               	return
  1574  00BA                     __end_of_isdigit:	
  1575                           
  1576                           	psect	text3
  1577  00BA                     __ptext3:	
  1578 ;; *************** function ___wmul *****************
  1579 ;; Defined at:
  1580 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  1581 ;; Parameters:    Size  Location     Type
  1582 ;;  multiplier      2    0[COMMON] unsigned int 
  1583 ;;  multiplicand    2    2[COMMON] unsigned int 
  1584 ;; Auto vars:     Size  Location     Type
  1585 ;;  product         2    4[COMMON] unsigned int 
  1586 ;; Return value:  Size  Location     Type
  1587 ;;                  2    0[COMMON] unsigned int 
  1588 ;; Registers used:
  1589 ;;		wreg, status,2, status,0
  1590 ;; Tracked objects:
  1591 ;;		On entry : 300/0
  1592 ;;		On exit  : 300/0
  1593 ;;		Unchanged: 300/0
  1594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1595 ;;      Params:         4       0       0       0       0
  1596 ;;      Locals:         2       0       0       0       0
  1597 ;;      Temps:          0       0       0       0       0
  1598 ;;      Totals:         6       0       0       0       0
  1599 ;;Total ram usage:        6 bytes
  1600 ;; Hardware stack levels used:    1
  1601 ;; This function calls:
  1602 ;;		Nothing
  1603 ;; This function is called by:
  1604 ;;		_sprintf
  1605 ;; This function uses a non-reentrant model
  1606 ;;
  1607                           
  1608                           
  1609                           ;psect for function ___wmul
  1610  00BA                     ___wmul:	
  1611                           
  1612                           ;incstack = 0
  1613                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1614  00BA  01F4               	clrf	___wmul@product
  1615  00BB  01F5               	clrf	___wmul@product+1
  1616  00BC                     l1335:	
  1617  00BC  1C70               	btfss	___wmul@multiplier,0
  1618  00BD  28C4               	goto	l285
  1619  00BE  0872               	movf	___wmul@multiplicand,w
  1620  00BF  07F4               	addwf	___wmul@product,f
  1621  00C0  1803               	skipnc
  1622  00C1  0AF5               	incf	___wmul@product+1,f
  1623  00C2  0873               	movf	___wmul@multiplicand+1,w
  1624  00C3  07F5               	addwf	___wmul@product+1,f
  1625  00C4                     l285:	
  1626  00C4  3001               	movlw	1
  1627  00C5                     u935:	
  1628  00C5  1003               	clrc
  1629  00C6  0DF2               	rlf	___wmul@multiplicand,f
  1630  00C7  0DF3               	rlf	___wmul@multiplicand+1,f
  1631  00C8  3EFF               	addlw	-1
  1632  00C9  1D03               	skipz
  1633  00CA  28C5               	goto	u935
  1634  00CB  3001               	movlw	1
  1635  00CC                     u945:	
  1636  00CC  1003               	clrc
  1637  00CD  0CF1               	rrf	___wmul@multiplier+1,f
  1638  00CE  0CF0               	rrf	___wmul@multiplier,f
  1639  00CF  3EFF               	addlw	-1
  1640  00D0  1D03               	skipz
  1641  00D1  28CC               	goto	u945
  1642  00D2  0870               	movf	___wmul@multiplier,w
  1643  00D3  0471               	iorwf	___wmul@multiplier+1,w
  1644  00D4  1D03               	btfss	3,2
  1645  00D5  28BC               	goto	l1335
  1646  00D6  0875               	movf	___wmul@product+1,w
  1647  00D7  00F1               	movwf	?___wmul+1
  1648  00D8  0874               	movf	___wmul@product,w
  1649  00D9  00F0               	movwf	?___wmul
  1650  00DA  0008               	return
  1651  00DB                     __end_of___wmul:	
  1652                           
  1653                           	psect	text4
  1654  0103                     __ptext4:	
  1655 ;; *************** function ___lwmod *****************
  1656 ;; Defined at:
  1657 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  1658 ;; Parameters:    Size  Location     Type
  1659 ;;  divisor         2    8[COMMON] unsigned int 
  1660 ;;  dividend        2   10[COMMON] unsigned int 
  1661 ;; Auto vars:     Size  Location     Type
  1662 ;;  counter         1   13[COMMON] unsigned char 
  1663 ;; Return value:  Size  Location     Type
  1664 ;;                  2    8[COMMON] unsigned int 
  1665 ;; Registers used:
  1666 ;;		wreg, status,2, status,0
  1667 ;; Tracked objects:
  1668 ;;		On entry : 300/0
  1669 ;;		On exit  : 300/0
  1670 ;;		Unchanged: 300/0
  1671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1672 ;;      Params:         4       0       0       0       0
  1673 ;;      Locals:         1       0       0       0       0
  1674 ;;      Temps:          1       0       0       0       0
  1675 ;;      Totals:         6       0       0       0       0
  1676 ;;Total ram usage:        6 bytes
  1677 ;; Hardware stack levels used:    1
  1678 ;; This function calls:
  1679 ;;		Nothing
  1680 ;; This function is called by:
  1681 ;;		_sprintf
  1682 ;; This function uses a non-reentrant model
  1683 ;;
  1684                           
  1685                           
  1686                           ;psect for function ___lwmod
  1687  0103                     ___lwmod:	
  1688                           
  1689                           ;incstack = 0
  1690                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1691  0103  0878               	movf	___lwmod@divisor,w
  1692  0104  0479               	iorwf	___lwmod@divisor+1,w
  1693  0105  1903               	btfsc	3,2
  1694  0106  2930               	goto	l1415
  1695  0107  01FD               	clrf	___lwmod@counter
  1696  0108  0AFD               	incf	___lwmod@counter,f
  1697  0109                     l1405:	
  1698  0109  1BF9               	btfsc	___lwmod@divisor+1,7
  1699  010A  2917               	goto	l1407
  1700  010B  3001               	movlw	1
  1701  010C                     u1115:	
  1702  010C  1003               	clrc
  1703  010D  0DF8               	rlf	___lwmod@divisor,f
  1704  010E  0DF9               	rlf	___lwmod@divisor+1,f
  1705  010F  3EFF               	addlw	-1
  1706  0110  1D03               	skipz
  1707  0111  290C               	goto	u1115
  1708  0112  3001               	movlw	1
  1709  0113  00FC               	movwf	??___lwmod
  1710  0114  087C               	movf	??___lwmod,w
  1711  0115  07FD               	addwf	___lwmod@counter,f
  1712  0116  2909               	goto	l1405
  1713  0117                     l1407:	
  1714  0117  0879               	movf	___lwmod@divisor+1,w
  1715  0118  027B               	subwf	___lwmod@dividend+1,w
  1716  0119  1D03               	skipz
  1717  011A  291D               	goto	u1135
  1718  011B  0878               	movf	___lwmod@divisor,w
  1719  011C  027A               	subwf	___lwmod@dividend,w
  1720  011D                     u1135:	
  1721  011D  1C03               	skipc
  1722  011E  2925               	goto	l1411
  1723  011F  0878               	movf	___lwmod@divisor,w
  1724  0120  02FA               	subwf	___lwmod@dividend,f
  1725  0121  0879               	movf	___lwmod@divisor+1,w
  1726  0122  1C03               	skipc
  1727  0123  03FB               	decf	___lwmod@dividend+1,f
  1728  0124  02FB               	subwf	___lwmod@dividend+1,f
  1729  0125                     l1411:	
  1730  0125  3001               	movlw	1
  1731  0126                     u1145:	
  1732  0126  1003               	clrc
  1733  0127  0CF9               	rrf	___lwmod@divisor+1,f
  1734  0128  0CF8               	rrf	___lwmod@divisor,f
  1735  0129  3EFF               	addlw	-1
  1736  012A  1D03               	skipz
  1737  012B  2926               	goto	u1145
  1738  012C  3001               	movlw	1
  1739  012D  02FD               	subwf	___lwmod@counter,f
  1740  012E  1D03               	btfss	3,2
  1741  012F  2917               	goto	l1407
  1742  0130                     l1415:	
  1743  0130  087B               	movf	___lwmod@dividend+1,w
  1744  0131  00F9               	movwf	?___lwmod+1
  1745  0132  087A               	movf	___lwmod@dividend,w
  1746  0133  00F8               	movwf	?___lwmod
  1747  0134  0008               	return
  1748  0135                     __end_of___lwmod:	
  1749                           
  1750                           	psect	text5
  1751  016D                     __ptext5:	
  1752 ;; *************** function ___lwdiv *****************
  1753 ;; Defined at:
  1754 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  1755 ;; Parameters:    Size  Location     Type
  1756 ;;  divisor         2    0[COMMON] unsigned int 
  1757 ;;  dividend        2    2[COMMON] unsigned int 
  1758 ;; Auto vars:     Size  Location     Type
  1759 ;;  quotient        2    5[COMMON] unsigned int 
  1760 ;;  counter         1    7[COMMON] unsigned char 
  1761 ;; Return value:  Size  Location     Type
  1762 ;;                  2    0[COMMON] unsigned int 
  1763 ;; Registers used:
  1764 ;;		wreg, status,2, status,0
  1765 ;; Tracked objects:
  1766 ;;		On entry : 300/0
  1767 ;;		On exit  : 300/0
  1768 ;;		Unchanged: 300/0
  1769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1770 ;;      Params:         4       0       0       0       0
  1771 ;;      Locals:         3       0       0       0       0
  1772 ;;      Temps:          1       0       0       0       0
  1773 ;;      Totals:         8       0       0       0       0
  1774 ;;Total ram usage:        8 bytes
  1775 ;; Hardware stack levels used:    1
  1776 ;; This function calls:
  1777 ;;		Nothing
  1778 ;; This function is called by:
  1779 ;;		_sprintf
  1780 ;; This function uses a non-reentrant model
  1781 ;;
  1782                           
  1783                           
  1784                           ;psect for function ___lwdiv
  1785  016D                     ___lwdiv:	
  1786                           
  1787                           ;incstack = 0
  1788                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1789  016D  01F5               	clrf	___lwdiv@quotient
  1790  016E  01F6               	clrf	___lwdiv@quotient+1
  1791  016F  0870               	movf	___lwdiv@divisor,w
  1792  0170  0471               	iorwf	___lwdiv@divisor+1,w
  1793  0171  1903               	btfsc	3,2
  1794  0172  29A4               	goto	l1393
  1795  0173  01F7               	clrf	___lwdiv@counter
  1796  0174  0AF7               	incf	___lwdiv@counter,f
  1797  0175                     l1381:	
  1798  0175  1BF1               	btfsc	___lwdiv@divisor+1,7
  1799  0176  2983               	goto	l1383
  1800  0177  3001               	movlw	1
  1801  0178                     u1045:	
  1802  0178  1003               	clrc
  1803  0179  0DF0               	rlf	___lwdiv@divisor,f
  1804  017A  0DF1               	rlf	___lwdiv@divisor+1,f
  1805  017B  3EFF               	addlw	-1
  1806  017C  1D03               	skipz
  1807  017D  2978               	goto	u1045
  1808  017E  3001               	movlw	1
  1809  017F  00F4               	movwf	??___lwdiv
  1810  0180  0874               	movf	??___lwdiv,w
  1811  0181  07F7               	addwf	___lwdiv@counter,f
  1812  0182  2975               	goto	l1381
  1813  0183                     l1383:	
  1814  0183  3001               	movlw	1
  1815  0184                     u1065:	
  1816  0184  1003               	clrc
  1817  0185  0DF5               	rlf	___lwdiv@quotient,f
  1818  0186  0DF6               	rlf	___lwdiv@quotient+1,f
  1819  0187  3EFF               	addlw	-1
  1820  0188  1D03               	skipz
  1821  0189  2984               	goto	u1065
  1822  018A  0871               	movf	___lwdiv@divisor+1,w
  1823  018B  0273               	subwf	___lwdiv@dividend+1,w
  1824  018C  1D03               	skipz
  1825  018D  2990               	goto	u1075
  1826  018E  0870               	movf	___lwdiv@divisor,w
  1827  018F  0272               	subwf	___lwdiv@dividend,w
  1828  0190                     u1075:	
  1829  0190  1C03               	skipc
  1830  0191  2999               	goto	l1389
  1831  0192  0870               	movf	___lwdiv@divisor,w
  1832  0193  02F2               	subwf	___lwdiv@dividend,f
  1833  0194  0871               	movf	___lwdiv@divisor+1,w
  1834  0195  1C03               	skipc
  1835  0196  03F3               	decf	___lwdiv@dividend+1,f
  1836  0197  02F3               	subwf	___lwdiv@dividend+1,f
  1837  0198  1475               	bsf	___lwdiv@quotient,0
  1838  0199                     l1389:	
  1839  0199  3001               	movlw	1
  1840  019A                     u1085:	
  1841  019A  1003               	clrc
  1842  019B  0CF1               	rrf	___lwdiv@divisor+1,f
  1843  019C  0CF0               	rrf	___lwdiv@divisor,f
  1844  019D  3EFF               	addlw	-1
  1845  019E  1D03               	skipz
  1846  019F  299A               	goto	u1085
  1847  01A0  3001               	movlw	1
  1848  01A1  02F7               	subwf	___lwdiv@counter,f
  1849  01A2  1D03               	btfss	3,2
  1850  01A3  2983               	goto	l1383
  1851  01A4                     l1393:	
  1852  01A4  0876               	movf	___lwdiv@quotient+1,w
  1853  01A5  00F1               	movwf	?___lwdiv+1
  1854  01A6  0875               	movf	___lwdiv@quotient,w
  1855  01A7  00F0               	movwf	?___lwdiv
  1856  01A8  0008               	return
  1857  01A9                     __end_of___lwdiv:	
  1858                           
  1859                           	psect	text6
  1860  0207                     __ptext6:	
  1861 ;; *************** function _readADC *****************
  1862 ;; Defined at:
  1863 ;;		line 161 in file "Traffic.c"
  1864 ;; Parameters:    Size  Location     Type
  1865 ;;  channel         1    wreg     unsigned char 
  1866 ;; Auto vars:     Size  Location     Type
  1867 ;;  channel         1    4[COMMON] unsigned char 
  1868 ;;  adc             2    5[COMMON] int 
  1869 ;; Return value:  Size  Location     Type
  1870 ;;                  2    0[COMMON] unsigned int 
  1871 ;; Registers used:
  1872 ;;		wreg, status,2, status,0
  1873 ;; Tracked objects:
  1874 ;;		On entry : 0/0
  1875 ;;		On exit  : 0/0
  1876 ;;		Unchanged: 0/0
  1877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1878 ;;      Params:         2       0       0       0       0
  1879 ;;      Locals:         3       0       0       0       0
  1880 ;;      Temps:          2       0       0       0       0
  1881 ;;      Totals:         7       0       0       0       0
  1882 ;;Total ram usage:        7 bytes
  1883 ;; Hardware stack levels used:    1
  1884 ;; This function calls:
  1885 ;;		Nothing
  1886 ;; This function is called by:
  1887 ;;		_main
  1888 ;; This function uses a non-reentrant model
  1889 ;;
  1890                           
  1891                           
  1892                           ;psect for function _readADC
  1893  0207                     _readADC:	
  1894                           
  1895                           ;incstack = 0
  1896                           ; Regs used in _readADC: [wreg+status,2+status,0]
  1897                           ;readADC@channel stored from wreg
  1898  0207  00F4               	movwf	readADC@channel
  1899                           
  1900                           ;Traffic.c: 163: int adc;;Traffic.c: 165: TRISA=0x00;
  1901  0208  1683               	bsf	3,5	;RP0=1, select bank1
  1902  0209  1303               	bcf	3,6	;RP1=0, select bank1
  1903  020A  0185               	clrf	5	;volatile
  1904                           
  1905                           ;Traffic.c: 166: TRISAbits.TRISA0=1;
  1906  020B  1405               	bsf	5,0	;volatile
  1907                           
  1908                           ;Traffic.c: 167: TRISAbits.TRISA1=1;
  1909  020C  1485               	bsf	5,1	;volatile
  1910                           
  1911                           ;Traffic.c: 168: TRISAbits.TRISA2=1;
  1912  020D  1505               	bsf	5,2	;volatile
  1913                           
  1914                           ;Traffic.c: 170: ADCON0&=0xC5;
  1915  020E  30C5               	movlw	197
  1916  020F  00F2               	movwf	??_readADC
  1917  0210  0872               	movf	??_readADC,w
  1918  0211  1283               	bcf	3,5	;RP0=0, select bank0
  1919  0212  059F               	andwf	31,f	;volatile
  1920                           
  1921                           ;Traffic.c: 171: ADCON0|=channel<<2;
  1922  0213  0874               	movf	readADC@channel,w
  1923  0214  00F2               	movwf	??_readADC
  1924  0215  3001               	movlw	1
  1925  0216                     u1275:	
  1926  0216  1003               	clrc
  1927  0217  0DF2               	rlf	??_readADC,f
  1928  0218  3EFF               	addlw	-1
  1929  0219  1D03               	skipz
  1930  021A  2A16               	goto	u1275
  1931  021B  1003               	clrc
  1932  021C  0D72               	rlf	??_readADC,w
  1933  021D  00F3               	movwf	??_readADC+1
  1934  021E  0873               	movf	??_readADC+1,w
  1935  021F  049F               	iorwf	31,f	;volatile
  1936                           
  1937                           ;Traffic.c: 172: _delay((unsigned long)((20)*(8000000/4000000.0)));
  1938  0220  300D               	movlw	13
  1939  0221  00F2               	movwf	??_readADC
  1940  0222                     u1597:	
  1941  0222  0BF2               	decfsz	??_readADC,f
  1942  0223  2A22               	goto	u1597
  1943                           
  1944                           ;Traffic.c: 174: if(channel==0){
  1945  0224  0874               	movf	readADC@channel,w
  1946  0225  1D03               	btfss	3,2
  1947  0226  2A3E               	goto	l136
  1948                           
  1949                           ;Traffic.c: 176: ADCON0bits.CHS=0;
  1950  0227  30C3               	movlw	-61
  1951  0228  1283               	bcf	3,5	;RP0=0, select bank0
  1952  0229  1303               	bcf	3,6	;RP1=0, select bank0
  1953  022A  059F               	andwf	31,f	;volatile
  1954                           
  1955                           ;Traffic.c: 177: ADCON0bits.GO_nDONE=1;
  1956  022B  149F               	bsf	31,1	;volatile
  1957                           
  1958                           ;Traffic.c: 178: _delay((unsigned long)((20)*(8000000/4000000.0)));
  1959  022C  300D               	movlw	13
  1960  022D  00F2               	movwf	??_readADC
  1961  022E                     u1607:	
  1962  022E  0BF2               	decfsz	??_readADC,f
  1963  022F  2A2E               	goto	u1607
  1964  0230                     l137:	
  1965                           ;Traffic.c: 179: while(ADCON0bits.GO_nDONE);
  1966                           
  1967  0230  1283               	bcf	3,5	;RP0=0, select bank0
  1968  0231  1303               	bcf	3,6	;RP1=0, select bank0
  1969  0232  189F               	btfsc	31,1	;volatile
  1970  0233  2A30               	goto	l137
  1971                           
  1972                           ;Traffic.c: 182: adc=((ADRESH<<8)+ADRESL);
  1973  0234  081E               	movf	30,w	;volatile
  1974  0235  00F6               	movwf	readADC@adc+1
  1975  0236  1683               	bsf	3,5	;RP0=1, select bank1
  1976  0237  081E               	movf	30,w	;volatile
  1977  0238  00F5               	movwf	readADC@adc
  1978                           
  1979                           ;Traffic.c: 183: adc=adc>>1;
  1980  0239  0D76               	rlf	readADC@adc+1,w
  1981  023A  0C76               	rrf	readADC@adc+1,w
  1982  023B  00F6               	movwf	readADC@adc+1
  1983  023C  0C75               	rrf	readADC@adc,w
  1984  023D  00F5               	movwf	readADC@adc
  1985  023E                     l136:	
  1986                           
  1987                           ;Traffic.c: 185: };Traffic.c: 186: _delay((unsigned long)((20)*(8000000/4000000.0)));
  1988  023E  300D               	movlw	13
  1989  023F  00F2               	movwf	??_readADC
  1990  0240                     u1617:	
  1991  0240  0BF2               	decfsz	??_readADC,f
  1992  0241  2A40               	goto	u1617
  1993                           
  1994                           ;Traffic.c: 188: if(channel==1){
  1995  0242  0374               	decf	readADC@channel,w
  1996  0243  1D03               	btfss	3,2
  1997  0244  2A5E               	goto	l140
  1998                           
  1999                           ;Traffic.c: 190: ADCON0bits.CHS=1;
  2000  0245  1283               	bcf	3,5	;RP0=0, select bank0
  2001  0246  1303               	bcf	3,6	;RP1=0, select bank0
  2002  0247  081F               	movf	31,w	;volatile
  2003  0248  39C3               	andlw	-61
  2004  0249  3804               	iorlw	4
  2005  024A  009F               	movwf	31	;volatile
  2006                           
  2007                           ;Traffic.c: 191: ADCON0bits.GO_nDONE=1;
  2008  024B  149F               	bsf	31,1	;volatile
  2009                           
  2010                           ;Traffic.c: 192: _delay((unsigned long)((20)*(8000000/4000000.0)));
  2011  024C  300D               	movlw	13
  2012  024D  00F2               	movwf	??_readADC
  2013  024E                     u1627:	
  2014  024E  0BF2               	decfsz	??_readADC,f
  2015  024F  2A4E               	goto	u1627
  2016  0250                     l141:	
  2017                           ;Traffic.c: 193: while(ADCON0bits.GO_nDONE);
  2018                           
  2019  0250  1283               	bcf	3,5	;RP0=0, select bank0
  2020  0251  1303               	bcf	3,6	;RP1=0, select bank0
  2021  0252  189F               	btfsc	31,1	;volatile
  2022  0253  2A50               	goto	l141
  2023                           
  2024                           ;Traffic.c: 196: adc=((ADRESH<<8)+ADRESL);
  2025  0254  081E               	movf	30,w	;volatile
  2026  0255  00F6               	movwf	readADC@adc+1
  2027  0256  1683               	bsf	3,5	;RP0=1, select bank1
  2028  0257  081E               	movf	30,w	;volatile
  2029  0258  00F5               	movwf	readADC@adc
  2030                           
  2031                           ;Traffic.c: 197: adc=adc>>1;
  2032  0259  0D76               	rlf	readADC@adc+1,w
  2033  025A  0C76               	rrf	readADC@adc+1,w
  2034  025B  00F6               	movwf	readADC@adc+1
  2035  025C  0C75               	rrf	readADC@adc,w
  2036  025D  00F5               	movwf	readADC@adc
  2037  025E                     l140:	
  2038                           
  2039                           ;Traffic.c: 198: };Traffic.c: 199: _delay((unsigned long)((20)*(8000000/4000000.0)));
  2040  025E  300D               	movlw	13
  2041  025F  00F2               	movwf	??_readADC
  2042  0260                     u1637:	
  2043  0260  0BF2               	decfsz	??_readADC,f
  2044  0261  2A60               	goto	u1637
  2045                           
  2046                           ;Traffic.c: 201: if(channel==2){
  2047  0262  3002               	movlw	2
  2048  0263  0674               	xorwf	readADC@channel,w
  2049  0264  1D03               	btfss	3,2
  2050  0265  2A7F               	goto	l144
  2051                           
  2052                           ;Traffic.c: 203: ADCON0bits.CHS=2;
  2053  0266  1283               	bcf	3,5	;RP0=0, select bank0
  2054  0267  1303               	bcf	3,6	;RP1=0, select bank0
  2055  0268  081F               	movf	31,w	;volatile
  2056  0269  39C3               	andlw	-61
  2057  026A  3808               	iorlw	8
  2058  026B  009F               	movwf	31	;volatile
  2059                           
  2060                           ;Traffic.c: 204: ADCON0bits.GO_nDONE=1;
  2061  026C  149F               	bsf	31,1	;volatile
  2062                           
  2063                           ;Traffic.c: 205: _delay((unsigned long)((20)*(8000000/4000000.0)));
  2064  026D  300D               	movlw	13
  2065  026E  00F2               	movwf	??_readADC
  2066  026F                     u1647:	
  2067  026F  0BF2               	decfsz	??_readADC,f
  2068  0270  2A6F               	goto	u1647
  2069  0271                     l145:	
  2070                           ;Traffic.c: 206: while(ADCON0bits.GO_nDONE);
  2071                           
  2072  0271  1283               	bcf	3,5	;RP0=0, select bank0
  2073  0272  1303               	bcf	3,6	;RP1=0, select bank0
  2074  0273  189F               	btfsc	31,1	;volatile
  2075  0274  2A71               	goto	l145
  2076                           
  2077                           ;Traffic.c: 209: adc=((ADRESH<<8)+ADRESL);
  2078  0275  081E               	movf	30,w	;volatile
  2079  0276  00F6               	movwf	readADC@adc+1
  2080  0277  1683               	bsf	3,5	;RP0=1, select bank1
  2081  0278  081E               	movf	30,w	;volatile
  2082  0279  00F5               	movwf	readADC@adc
  2083                           
  2084                           ;Traffic.c: 210: adc=adc>>1;
  2085  027A  0D76               	rlf	readADC@adc+1,w
  2086  027B  0C76               	rrf	readADC@adc+1,w
  2087  027C  00F6               	movwf	readADC@adc+1
  2088  027D  0C75               	rrf	readADC@adc,w
  2089  027E  00F5               	movwf	readADC@adc
  2090  027F                     l144:	
  2091                           
  2092                           ;Traffic.c: 212: };Traffic.c: 214: return adc;
  2093  027F  0876               	movf	readADC@adc+1,w
  2094  0280  00F1               	movwf	?_readADC+1
  2095  0281  0875               	movf	readADC@adc,w
  2096  0282  00F0               	movwf	?_readADC
  2097  0283  0008               	return
  2098  0284                     __end_of_readADC:	
  2099                           
  2100                           	psect	text7
  2101  00DB                     __ptext7:	
  2102 ;; *************** function _UART_Print *****************
  2103 ;; Defined at:
  2104 ;;		line 76 in file "Traffic.c"
  2105 ;; Parameters:    Size  Location     Type
  2106 ;;  data            2    1[COMMON] PTR const unsigned char 
  2107 ;;		 -> STR_6(3), STR_4(2), STR_2(2), main@bufferLCD(16), 
  2108 ;;		 -> message(26), 
  2109 ;; Auto vars:     Size  Location     Type
  2110 ;;  i               1    4[COMMON] unsigned char 
  2111 ;; Return value:  Size  Location     Type
  2112 ;;                  1    wreg      void 
  2113 ;; Registers used:
  2114 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2115 ;; Tracked objects:
  2116 ;;		On entry : 0/0
  2117 ;;		On exit  : 300/0
  2118 ;;		Unchanged: 0/0
  2119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2120 ;;      Params:         2       0       0       0       0
  2121 ;;      Locals:         1       0       0       0       0
  2122 ;;      Temps:          1       0       0       0       0
  2123 ;;      Totals:         4       0       0       0       0
  2124 ;;Total ram usage:        4 bytes
  2125 ;; Hardware stack levels used:    1
  2126 ;; Hardware stack levels required when called:    1
  2127 ;; This function calls:
  2128 ;;		_UART_PutC
  2129 ;; This function is called by:
  2130 ;;		_main
  2131 ;; This function uses a non-reentrant model
  2132 ;;
  2133                           
  2134                           
  2135                           ;psect for function _UART_Print
  2136  00DB                     _UART_Print:	
  2137                           
  2138                           ;Traffic.c: 78: uint8_t i = 0;
  2139                           
  2140                           ;incstack = 0
  2141                           ; Regs used in _UART_Print: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2142  00DB  01F4               	clrf	UART_Print@i
  2143  00DC                     l1529:	
  2144                           ;Traffic.c: 79: while (data[i] != '\0')
  2145                           
  2146  00DC  0874               	movf	UART_Print@i,w
  2147  00DD  0771               	addwf	UART_Print@data,w
  2148  00DE  0084               	movwf	4
  2149  00DF  0872               	movf	UART_Print@data+1,w
  2150  00E0  1803               	skipnc
  2151  00E1  0A72               	incf	UART_Print@data+1,w
  2152  00E2  1283               	bcf	3,5	;RP0=0, select bank0
  2153  00E3  1303               	bcf	3,6	;RP1=0, select bank0
  2154  00E4  00FF               	movwf	127
  2155  00E5  120A  118A  2003  120A  118A  	fcall	stringtab
  2156  00EA  3A00               	xorlw	0
  2157  00EB  1903               	btfsc	3,2
  2158  00EC  0008               	return
  2159                           
  2160                           ;Traffic.c: 80: UART_PutC (data[i++]);
  2161  00ED  0874               	movf	UART_Print@i,w
  2162  00EE  0771               	addwf	UART_Print@data,w
  2163  00EF  0084               	movwf	4
  2164  00F0  0872               	movf	UART_Print@data+1,w
  2165  00F1  1803               	skipnc
  2166  00F2  0A72               	incf	UART_Print@data+1,w
  2167  00F3  00FF               	movwf	127
  2168  00F4  120A  118A  2003  120A  118A  	fcall	stringtab
  2169  00F9  120A  118A  20A4  120A  118A  	fcall	_UART_PutC
  2170  00FE  3001               	movlw	1
  2171  00FF  00F3               	movwf	??_UART_Print
  2172  0100  0873               	movf	??_UART_Print,w
  2173  0101  07F4               	addwf	UART_Print@i,f
  2174  0102  28DC               	goto	l1529
  2175  0103                     __end_of_UART_Print:	
  2176                           
  2177                           	psect	text8
  2178  00A4                     __ptext8:	
  2179 ;; *************** function _UART_PutC *****************
  2180 ;; Defined at:
  2181 ;;		line 70 in file "Traffic.c"
  2182 ;; Parameters:    Size  Location     Type
  2183 ;;  data            1    wreg     const unsigned char 
  2184 ;; Auto vars:     Size  Location     Type
  2185 ;;  data            1    0[COMMON] const unsigned char 
  2186 ;; Return value:  Size  Location     Type
  2187 ;;                  1    wreg      void 
  2188 ;; Registers used:
  2189 ;;		wreg
  2190 ;; Tracked objects:
  2191 ;;		On entry : 300/0
  2192 ;;		On exit  : 300/0
  2193 ;;		Unchanged: 0/0
  2194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2195 ;;      Params:         0       0       0       0       0
  2196 ;;      Locals:         1       0       0       0       0
  2197 ;;      Temps:          0       0       0       0       0
  2198 ;;      Totals:         1       0       0       0       0
  2199 ;;Total ram usage:        1 bytes
  2200 ;; Hardware stack levels used:    1
  2201 ;; This function calls:
  2202 ;;		Nothing
  2203 ;; This function is called by:
  2204 ;;		_UART_Print
  2205 ;;		_main
  2206 ;; This function uses a non-reentrant model
  2207 ;;
  2208                           
  2209                           
  2210                           ;psect for function _UART_PutC
  2211  00A4                     _UART_PutC:	
  2212                           
  2213                           ;incstack = 0
  2214                           ; Regs used in _UART_PutC: [wreg]
  2215                           ;UART_PutC@data stored from wreg
  2216  00A4  00F0               	movwf	UART_PutC@data
  2217  00A5                     l113:	
  2218                           ;Traffic.c: 72: while (TRMT == 0);
  2219                           
  2220  00A5  1683               	bsf	3,5	;RP0=1, select bank1
  2221  00A6  1C98               	btfss	24,1	;volatile
  2222  00A7  28A5               	goto	l113
  2223                           
  2224                           ;Traffic.c: 73: TXREG = data;
  2225  00A8  0870               	movf	UART_PutC@data,w
  2226  00A9  1283               	bcf	3,5	;RP0=0, select bank0
  2227  00AA  0099               	movwf	25	;volatile
  2228  00AB  0008               	return
  2229  00AC                     __end_of_UART_PutC:	
  2230                           
  2231                           	psect	text9
  2232  0284                     __ptext9:	
  2233 ;; *************** function _UART_Init *****************
  2234 ;; Defined at:
  2235 ;;		line 28 in file "Traffic.c"
  2236 ;; Parameters:    Size  Location     Type
  2237 ;;  baud_rate       4    0[BANK0 ] const unsigned long 
  2238 ;; Auto vars:     Size  Location     Type
  2239 ;;  n               2    8[BANK0 ] int 
  2240 ;; Return value:  Size  Location     Type
  2241 ;;                  1    wreg      void 
  2242 ;; Registers used:
  2243 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2244 ;; Tracked objects:
  2245 ;;		On entry : B00/0
  2246 ;;		On exit  : 300/0
  2247 ;;		Unchanged: 0/0
  2248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2249 ;;      Params:         0       4       0       0       0
  2250 ;;      Locals:         0       2       0       0       0
  2251 ;;      Temps:          0       4       0       0       0
  2252 ;;      Totals:         0      10       0       0       0
  2253 ;;Total ram usage:       10 bytes
  2254 ;; Hardware stack levels used:    1
  2255 ;; Hardware stack levels required when called:    1
  2256 ;; This function calls:
  2257 ;;		___lldiv
  2258 ;; This function is called by:
  2259 ;;		_main
  2260 ;; This function uses a non-reentrant model
  2261 ;;
  2262                           
  2263                           
  2264                           ;psect for function _UART_Init
  2265  0284                     _UART_Init:	
  2266                           
  2267                           ;Traffic.c: 30: int16_t n = ( 8000000 / (16 * baud_rate) ) - 1;
  2268                           
  2269                           ;incstack = 0
  2270                           ; Regs used in _UART_Init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2271  0284  0820               	movf	UART_Init@baud_rate,w
  2272  0285  00A4               	movwf	??_UART_Init
  2273  0286  0821               	movf	UART_Init@baud_rate+1,w
  2274  0287  00A5               	movwf	??_UART_Init+1
  2275  0288  0822               	movf	UART_Init@baud_rate+2,w
  2276  0289  00A6               	movwf	??_UART_Init+2
  2277  028A  0823               	movf	UART_Init@baud_rate+3,w
  2278  028B  00A7               	movwf	??_UART_Init+3
  2279  028C  3004               	movlw	4
  2280  028D                     u1185:	
  2281  028D  1003               	clrc
  2282  028E  0DA4               	rlf	??_UART_Init,f
  2283  028F  0DA5               	rlf	??_UART_Init+1,f
  2284  0290  0DA6               	rlf	??_UART_Init+2,f
  2285  0291  0DA7               	rlf	??_UART_Init+3,f
  2286  0292  3EFF               	addlw	-1
  2287  0293  1D03               	skipz
  2288  0294  2A8D               	goto	u1185
  2289  0295  0827               	movf	??_UART_Init+3,w
  2290  0296  00F3               	movwf	___lldiv@divisor+3
  2291  0297  0826               	movf	??_UART_Init+2,w
  2292  0298  00F2               	movwf	___lldiv@divisor+2
  2293  0299  0825               	movf	??_UART_Init+1,w
  2294  029A  00F1               	movwf	___lldiv@divisor+1
  2295  029B  0824               	movf	??_UART_Init,w
  2296  029C  00F0               	movwf	___lldiv@divisor
  2297  029D  3000               	movlw	0
  2298  029E  00F7               	movwf	___lldiv@dividend+3
  2299  029F  307A               	movlw	122
  2300  02A0  00F6               	movwf	___lldiv@dividend+2
  2301  02A1  3012               	movlw	18
  2302  02A2  00F5               	movwf	___lldiv@dividend+1
  2303  02A3  3000               	movlw	0
  2304  02A4  00F4               	movwf	___lldiv@dividend
  2305  02A5  120A  118A  21A9  120A  118A  	fcall	___lldiv
  2306  02AA  0870               	movf	?___lldiv,w
  2307  02AB  3EFF               	addlw	255
  2308  02AC  00A8               	movwf	UART_Init@n
  2309  02AD  0871               	movf	?___lldiv+1,w
  2310  02AE  1803               	skipnc
  2311  02AF  3E01               	addlw	1
  2312  02B0  3EFF               	addlw	255
  2313  02B1  00A9               	movwf	UART_Init@n+1
  2314                           
  2315                           ;Traffic.c: 32: if (n < 0)
  2316  02B2  1FA9               	btfss	UART_Init@n+1,7
  2317  02B3  2AB6               	goto	l1497
  2318                           
  2319                           ;Traffic.c: 33: n = 0;
  2320  02B4  01A8               	clrf	UART_Init@n
  2321  02B5  01A9               	clrf	UART_Init@n+1
  2322  02B6                     l1497:	
  2323                           
  2324                           ;Traffic.c: 35: if (n > 255)
  2325  02B6  0829               	movf	UART_Init@n+1,w
  2326  02B7  3A80               	xorlw	128
  2327  02B8  00FF               	movwf	127
  2328  02B9  3081               	movlw	129
  2329  02BA  027F               	subwf	127,w
  2330  02BB  1D03               	skipz
  2331  02BC  2ABF               	goto	u1205
  2332  02BD  3000               	movlw	0
  2333  02BE  0228               	subwf	UART_Init@n,w
  2334  02BF                     u1205:	
  2335  02BF  1C03               	skipc
  2336  02C0  2B09               	goto	l1505
  2337                           
  2338                           ;Traffic.c: 36: {;Traffic.c: 37: n = ( 8000000 / (64 * baud_rate) ) - 1;
  2339  02C1  1283               	bcf	3,5	;RP0=0, select bank0
  2340  02C2  1303               	bcf	3,6	;RP1=0, select bank0
  2341  02C3  0820               	movf	UART_Init@baud_rate,w
  2342  02C4  00A4               	movwf	??_UART_Init
  2343  02C5  0821               	movf	UART_Init@baud_rate+1,w
  2344  02C6  00A5               	movwf	??_UART_Init+1
  2345  02C7  0822               	movf	UART_Init@baud_rate+2,w
  2346  02C8  00A6               	movwf	??_UART_Init+2
  2347  02C9  0823               	movf	UART_Init@baud_rate+3,w
  2348  02CA  00A7               	movwf	??_UART_Init+3
  2349  02CB  3006               	movlw	6
  2350  02CC                     u1215:	
  2351  02CC  1003               	clrc
  2352  02CD  0DA4               	rlf	??_UART_Init,f
  2353  02CE  0DA5               	rlf	??_UART_Init+1,f
  2354  02CF  0DA6               	rlf	??_UART_Init+2,f
  2355  02D0  0DA7               	rlf	??_UART_Init+3,f
  2356  02D1  3EFF               	addlw	-1
  2357  02D2  1D03               	skipz
  2358  02D3  2ACC               	goto	u1215
  2359  02D4  0827               	movf	??_UART_Init+3,w
  2360  02D5  00F3               	movwf	___lldiv@divisor+3
  2361  02D6  0826               	movf	??_UART_Init+2,w
  2362  02D7  00F2               	movwf	___lldiv@divisor+2
  2363  02D8  0825               	movf	??_UART_Init+1,w
  2364  02D9  00F1               	movwf	___lldiv@divisor+1
  2365  02DA  0824               	movf	??_UART_Init,w
  2366  02DB  00F0               	movwf	___lldiv@divisor
  2367  02DC  3000               	movlw	0
  2368  02DD  00F7               	movwf	___lldiv@dividend+3
  2369  02DE  307A               	movlw	122
  2370  02DF  00F6               	movwf	___lldiv@dividend+2
  2371  02E0  3012               	movlw	18
  2372  02E1  00F5               	movwf	___lldiv@dividend+1
  2373  02E2  3000               	movlw	0
  2374  02E3  00F4               	movwf	___lldiv@dividend
  2375  02E4  120A  118A  21A9  120A  118A  	fcall	___lldiv
  2376  02E9  0870               	movf	?___lldiv,w
  2377  02EA  3EFF               	addlw	255
  2378  02EB  00A8               	movwf	UART_Init@n
  2379  02EC  0871               	movf	?___lldiv+1,w
  2380  02ED  1803               	skipnc
  2381  02EE  3E01               	addlw	1
  2382  02EF  3EFF               	addlw	255
  2383  02F0  00A9               	movwf	UART_Init@n+1
  2384                           
  2385                           ;Traffic.c: 38: if (n > 255)
  2386  02F1  0829               	movf	UART_Init@n+1,w
  2387  02F2  3A80               	xorlw	128
  2388  02F3  00FF               	movwf	127
  2389  02F4  3081               	movlw	129
  2390  02F5  027F               	subwf	127,w
  2391  02F6  1D03               	skipz
  2392  02F7  2AFA               	goto	u1225
  2393  02F8  3000               	movlw	0
  2394  02F9  0228               	subwf	UART_Init@n,w
  2395  02FA                     u1225:	
  2396  02FA  1C03               	skipc
  2397  02FB  2B02               	goto	l98
  2398                           
  2399                           ;Traffic.c: 39: n = 255;
  2400  02FC  30FF               	movlw	255
  2401  02FD  1283               	bcf	3,5	;RP0=0, select bank0
  2402  02FE  1303               	bcf	3,6	;RP1=0, select bank0
  2403  02FF  00A8               	movwf	UART_Init@n
  2404  0300  3000               	movlw	0
  2405  0301  00A9               	movwf	UART_Init@n+1
  2406  0302                     l98:	
  2407                           
  2408                           ;Traffic.c: 40: SPBRG = n;
  2409  0302  1283               	bcf	3,5	;RP0=0, select bank0
  2410  0303  1303               	bcf	3,6	;RP1=0, select bank0
  2411  0304  0828               	movf	UART_Init@n,w
  2412  0305  1683               	bsf	3,5	;RP0=1, select bank1
  2413  0306  0099               	movwf	25	;volatile
  2414                           
  2415                           ;Traffic.c: 41: TXSTA = 0x20;
  2416  0307  3020               	movlw	32
  2417  0308  2B0F               	goto	L1
  2418  0309                     l1505:	
  2419                           ;Traffic.c: 42: }
  2420                           
  2421                           
  2422                           ;Traffic.c: 44: else;Traffic.c: 45: {;Traffic.c: 46: SPBRG = n;
  2423  0309  1283               	bcf	3,5	;RP0=0, select bank0
  2424  030A  1303               	bcf	3,6	;RP1=0, select bank0
  2425  030B  0828               	movf	UART_Init@n,w
  2426  030C  1683               	bsf	3,5	;RP0=1, select bank1
  2427  030D  0099               	movwf	25	;volatile
  2428                           
  2429                           ;Traffic.c: 47: TXSTA = 0x24;
  2430  030E  3024               	movlw	36
  2431  030F                     L1:	
  2432  030F  0098               	movwf	24	;volatile
  2433                           
  2434                           ;Traffic.c: 48: };Traffic.c: 50: RCSTA = 0x90;
  2435  0310  3090               	movlw	144
  2436  0311  1283               	bcf	3,5	;RP0=0, select bank0
  2437  0312  0098               	movwf	24	;volatile
  2438  0313  0008               	return
  2439  0314                     __end_of_UART_Init:	
  2440                           
  2441                           	psect	text10
  2442  01A9                     __ptext10:	
  2443 ;; *************** function ___lldiv *****************
  2444 ;; Defined at:
  2445 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\__lldiv.c"
  2446 ;; Parameters:    Size  Location     Type
  2447 ;;  divisor         4    0[COMMON] unsigned long 
  2448 ;;  dividend        4    4[COMMON] unsigned long 
  2449 ;; Auto vars:     Size  Location     Type
  2450 ;;  quotient        4    9[COMMON] unsigned long 
  2451 ;;  counter         1   13[COMMON] unsigned char 
  2452 ;; Return value:  Size  Location     Type
  2453 ;;                  4    0[COMMON] unsigned long 
  2454 ;; Registers used:
  2455 ;;		wreg, status,2, status,0
  2456 ;; Tracked objects:
  2457 ;;		On entry : 300/0
  2458 ;;		On exit  : 300/0
  2459 ;;		Unchanged: 300/0
  2460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2461 ;;      Params:         8       0       0       0       0
  2462 ;;      Locals:         5       0       0       0       0
  2463 ;;      Temps:          1       0       0       0       0
  2464 ;;      Totals:        14       0       0       0       0
  2465 ;;Total ram usage:       14 bytes
  2466 ;; Hardware stack levels used:    1
  2467 ;; This function calls:
  2468 ;;		Nothing
  2469 ;; This function is called by:
  2470 ;;		_UART_Init
  2471 ;; This function uses a non-reentrant model
  2472 ;;
  2473                           
  2474                           
  2475                           ;psect for function ___lldiv
  2476  01A9                     ___lldiv:	
  2477                           
  2478                           ;incstack = 0
  2479                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  2480  01A9  3000               	movlw	0
  2481  01AA  00FC               	movwf	___lldiv@quotient+3
  2482  01AB  3000               	movlw	0
  2483  01AC  00FB               	movwf	___lldiv@quotient+2
  2484  01AD  3000               	movlw	0
  2485  01AE  00FA               	movwf	___lldiv@quotient+1
  2486  01AF  3000               	movlw	0
  2487  01B0  00F9               	movwf	___lldiv@quotient
  2488  01B1  0873               	movf	___lldiv@divisor+3,w
  2489  01B2  0472               	iorwf	___lldiv@divisor+2,w
  2490  01B3  0471               	iorwf	___lldiv@divisor+1,w
  2491  01B4  0470               	iorwf	___lldiv@divisor,w
  2492  01B5  1903               	skipnz
  2493  01B6  29FE               	goto	l1367
  2494  01B7  01FD               	clrf	___lldiv@counter
  2495  01B8  0AFD               	incf	___lldiv@counter,f
  2496  01B9                     l1353:	
  2497  01B9  1BF3               	btfsc	___lldiv@divisor+3,7
  2498  01BA  29C9               	goto	l1355
  2499  01BB  3001               	movlw	1
  2500  01BC  00F8               	movwf	??___lldiv
  2501  01BD                     u975:	
  2502  01BD  1003               	clrc
  2503  01BE  0DF0               	rlf	___lldiv@divisor,f
  2504  01BF  0DF1               	rlf	___lldiv@divisor+1,f
  2505  01C0  0DF2               	rlf	___lldiv@divisor+2,f
  2506  01C1  0DF3               	rlf	___lldiv@divisor+3,f
  2507  01C2  0BF8               	decfsz	??___lldiv,f
  2508  01C3  29BD               	goto	u975
  2509  01C4  3001               	movlw	1
  2510  01C5  00F8               	movwf	??___lldiv
  2511  01C6  0878               	movf	??___lldiv,w
  2512  01C7  07FD               	addwf	___lldiv@counter,f
  2513  01C8  29B9               	goto	l1353
  2514  01C9                     l1355:	
  2515  01C9  3001               	movlw	1
  2516  01CA  00F8               	movwf	??___lldiv
  2517  01CB                     u995:	
  2518  01CB  1003               	clrc
  2519  01CC  0DF9               	rlf	___lldiv@quotient,f
  2520  01CD  0DFA               	rlf	___lldiv@quotient+1,f
  2521  01CE  0DFB               	rlf	___lldiv@quotient+2,f
  2522  01CF  0DFC               	rlf	___lldiv@quotient+3,f
  2523  01D0  0BF8               	decfsz	??___lldiv,f
  2524  01D1  29CB               	goto	u995
  2525  01D2  0873               	movf	___lldiv@divisor+3,w
  2526  01D3  0277               	subwf	___lldiv@dividend+3,w
  2527  01D4  1D03               	skipz
  2528  01D5  29E0               	goto	u1005
  2529  01D6  0872               	movf	___lldiv@divisor+2,w
  2530  01D7  0276               	subwf	___lldiv@dividend+2,w
  2531  01D8  1D03               	skipz
  2532  01D9  29E0               	goto	u1005
  2533  01DA  0871               	movf	___lldiv@divisor+1,w
  2534  01DB  0275               	subwf	___lldiv@dividend+1,w
  2535  01DC  1D03               	skipz
  2536  01DD  29E0               	goto	u1005
  2537  01DE  0870               	movf	___lldiv@divisor,w
  2538  01DF  0274               	subwf	___lldiv@dividend,w
  2539  01E0                     u1005:	
  2540  01E0  1C03               	skipc
  2541  01E1  29F1               	goto	l1363
  2542  01E2  0870               	movf	___lldiv@divisor,w
  2543  01E3  02F4               	subwf	___lldiv@dividend,f
  2544  01E4  0871               	movf	___lldiv@divisor+1,w
  2545  01E5  1C03               	skipc
  2546  01E6  0F71               	incfsz	___lldiv@divisor+1,w
  2547  01E7  02F5               	subwf	___lldiv@dividend+1,f
  2548  01E8  0872               	movf	___lldiv@divisor+2,w
  2549  01E9  1C03               	skipc
  2550  01EA  0F72               	incfsz	___lldiv@divisor+2,w
  2551  01EB  02F6               	subwf	___lldiv@dividend+2,f
  2552  01EC  0873               	movf	___lldiv@divisor+3,w
  2553  01ED  1C03               	skipc
  2554  01EE  0F73               	incfsz	___lldiv@divisor+3,w
  2555  01EF  02F7               	subwf	___lldiv@dividend+3,f
  2556  01F0  1479               	bsf	___lldiv@quotient,0
  2557  01F1                     l1363:	
  2558  01F1  3001               	movlw	1
  2559  01F2                     u1015:	
  2560  01F2  1003               	clrc
  2561  01F3  0CF3               	rrf	___lldiv@divisor+3,f
  2562  01F4  0CF2               	rrf	___lldiv@divisor+2,f
  2563  01F5  0CF1               	rrf	___lldiv@divisor+1,f
  2564  01F6  0CF0               	rrf	___lldiv@divisor,f
  2565  01F7  3EFF               	addlw	-1
  2566  01F8  1D03               	skipz
  2567  01F9  29F2               	goto	u1015
  2568  01FA  3001               	movlw	1
  2569  01FB  02FD               	subwf	___lldiv@counter,f
  2570  01FC  1D03               	btfss	3,2
  2571  01FD  29C9               	goto	l1355
  2572  01FE                     l1367:	
  2573  01FE  087C               	movf	___lldiv@quotient+3,w
  2574  01FF  00F3               	movwf	?___lldiv+3
  2575  0200  087B               	movf	___lldiv@quotient+2,w
  2576  0201  00F2               	movwf	?___lldiv+2
  2577  0202  087A               	movf	___lldiv@quotient+1,w
  2578  0203  00F1               	movwf	?___lldiv+1
  2579  0204  0879               	movf	___lldiv@quotient,w
  2580  0205  00F0               	movwf	?___lldiv
  2581  0206  0008               	return
  2582  0207                     __end_of___lldiv:	
  2583                           
  2584                           	psect	text11
  2585  009C                     __ptext11:	
  2586 ;; *************** function _UART_GetC *****************
  2587 ;; Defined at:
  2588 ;;		line 59 in file "Traffic.c"
  2589 ;; Parameters:    Size  Location     Type
  2590 ;;		None
  2591 ;; Auto vars:     Size  Location     Type
  2592 ;;		None
  2593 ;; Return value:  Size  Location     Type
  2594 ;;                  1    wreg      unsigned char 
  2595 ;; Registers used:
  2596 ;;		wreg
  2597 ;; Tracked objects:
  2598 ;;		On entry : 300/0
  2599 ;;		On exit  : 300/0
  2600 ;;		Unchanged: 0/0
  2601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2602 ;;      Params:         0       0       0       0       0
  2603 ;;      Locals:         0       0       0       0       0
  2604 ;;      Temps:          0       0       0       0       0
  2605 ;;      Totals:         0       0       0       0       0
  2606 ;;Total ram usage:        0 bytes
  2607 ;; Hardware stack levels used:    1
  2608 ;; This function calls:
  2609 ;;		Nothing
  2610 ;; This function is called by:
  2611 ;;		_main
  2612 ;; This function uses a non-reentrant model
  2613 ;;
  2614                           
  2615                           
  2616                           ;psect for function _UART_GetC
  2617  009C                     _UART_GetC:	
  2618  009C                     l106:	
  2619                           ;Traffic.c: 61: while (RCIF == 0) ;
  2620                           
  2621                           ;incstack = 0
  2622                           ; Regs used in _UART_GetC: [wreg]
  2623                           
  2624  009C  1E8C               	btfss	12,5	;volatile
  2625  009D  289C               	goto	l106
  2626                           
  2627                           ;Traffic.c: 62: if (OERR)
  2628  009E  1C98               	btfss	24,1	;volatile
  2629  009F  28A2               	goto	l1519
  2630                           
  2631                           ;Traffic.c: 63: {;Traffic.c: 64: CREN = 0;
  2632  00A0  1218               	bcf	24,4	;volatile
  2633                           
  2634                           ;Traffic.c: 65: CREN = 1;
  2635  00A1  1618               	bsf	24,4	;volatile
  2636  00A2                     l1519:	
  2637                           
  2638                           ;Traffic.c: 66: };Traffic.c: 67: return RCREG;
  2639  00A2  081A               	movf	26,w	;volatile
  2640  00A3  0008               	return
  2641  00A4                     __end_of_UART_GetC:	
  2642                           
  2643                           	psect	text12
  2644  0096                     __ptext12:	
  2645 ;; *************** function _UART_Data_Ready *****************
  2646 ;; Defined at:
  2647 ;;		line 54 in file "Traffic.c"
  2648 ;; Parameters:    Size  Location     Type
  2649 ;;		None
  2650 ;; Auto vars:     Size  Location     Type
  2651 ;;		None
  2652 ;; Return value:  Size  Location     Type
  2653 ;;		None               void
  2654 ;; Registers used:
  2655 ;;		status,2, status,0
  2656 ;; Tracked objects:
  2657 ;;		On entry : 300/0
  2658 ;;		On exit  : 300/0
  2659 ;;		Unchanged: 0/0
  2660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2661 ;;      Params:         0       0       0       0       0
  2662 ;;      Locals:         0       0       0       0       0
  2663 ;;      Temps:          0       0       0       0       0
  2664 ;;      Totals:         0       0       0       0       0
  2665 ;;Total ram usage:        0 bytes
  2666 ;; Hardware stack levels used:    1
  2667 ;; This function calls:
  2668 ;;		Nothing
  2669 ;; This function is called by:
  2670 ;;		_main
  2671 ;; This function uses a non-reentrant model
  2672 ;;
  2673                           
  2674                           
  2675                           ;psect for function _UART_Data_Ready
  2676  0096                     _UART_Data_Ready:	
  2677                           
  2678                           ;Traffic.c: 56: return RCIF;
  2679                           
  2680                           ;incstack = 0
  2681                           ; Regs used in _UART_Data_Ready: [status]
  2682  0096  1A8C               	btfsc	12,5	;volatile
  2683  0097  289A               	goto	l1511
  2684  0098  1003               	clrc
  2685  0099  0008               	return
  2686  009A                     l1511:	
  2687  009A  1403               	setc
  2688  009B  0008               	return
  2689  009C                     __end_of_UART_Data_Ready:	
  2690                           
  2691                           	psect	text13
  2692  0135                     __ptext13:	
  2693 ;; *************** function _Lcd_Out2 *****************
  2694 ;; Defined at:
  2695 ;;		line 117 in file "lcd.h"
  2696 ;; Parameters:    Size  Location     Type
  2697 ;;  y               1    wreg     unsigned char 
  2698 ;;  x               1    3[COMMON] unsigned char 
  2699 ;;  buffer          1    4[COMMON] PTR unsigned char 
  2700 ;;		 -> main@bufferLCD(16), 
  2701 ;; Auto vars:     Size  Location     Type
  2702 ;;  y               1    6[COMMON] unsigned char 
  2703 ;;  data            1    7[COMMON] unsigned char 
  2704 ;; Return value:  Size  Location     Type
  2705 ;;                  1    wreg      void 
  2706 ;; Registers used:
  2707 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2708 ;; Tracked objects:
  2709 ;;		On entry : B00/0
  2710 ;;		On exit  : 800/0
  2711 ;;		Unchanged: 0/0
  2712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2713 ;;      Params:         2       0       0       0       0
  2714 ;;      Locals:         2       0       0       0       0
  2715 ;;      Temps:          1       0       0       0       0
  2716 ;;      Totals:         5       0       0       0       0
  2717 ;;Total ram usage:        5 bytes
  2718 ;; Hardware stack levels used:    1
  2719 ;; Hardware stack levels required when called:    1
  2720 ;; This function calls:
  2721 ;;		_Lcd_Chr_CP
  2722 ;;		_Lcd_Cmd
  2723 ;; This function is called by:
  2724 ;;		_main
  2725 ;; This function uses a non-reentrant model
  2726 ;;
  2727                           
  2728                           
  2729                           ;psect for function _Lcd_Out2
  2730  0135                     _Lcd_Out2:	
  2731                           
  2732                           ;incstack = 0
  2733                           ; Regs used in _Lcd_Out2: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2734                           ;Lcd_Out2@y stored from wreg
  2735  0135  00F6               	movwf	Lcd_Out2@y
  2736                           
  2737                           ;lcd.h: 119: unsigned char data;;lcd.h: 120: switch (y)
  2738  0136  2946               	goto	l1481
  2739  0137                     l1471:	
  2740  0137  0873               	movf	Lcd_Out2@x,w
  2741  0138  3E80               	addlw	128
  2742  0139  2942               	goto	L4
  2743  013A                     l1473:	
  2744  013A  0873               	movf	Lcd_Out2@x,w
  2745  013B  3EC0               	addlw	192
  2746  013C  2942               	goto	L4
  2747  013D                     l1475:	
  2748  013D  0873               	movf	Lcd_Out2@x,w
  2749  013E  3E94               	addlw	148
  2750  013F  2942               	goto	L4
  2751  0140                     l1477:	
  2752  0140  0873               	movf	Lcd_Out2@x,w
  2753  0141  3ED4               	addlw	212
  2754  0142                     L4:	
  2755  0142  00F5               	movwf	??_Lcd_Out2
  2756  0143  0875               	movf	??_Lcd_Out2,w
  2757  0144  00F7               	movwf	Lcd_Out2@data
  2758  0145  2954               	goto	l1483
  2759  0146                     l1481:	
  2760  0146  0876               	movf	Lcd_Out2@y,w
  2761                           
  2762                           ; Switch size 1, requested type "simple"
  2763                           ; Number of cases is 4, Range of values is 1 to 4
  2764                           ; switch strategies available:
  2765                           ; Name         Instructions Cycles
  2766                           ; simple_byte           13     7 (average)
  2767                           ; direct_byte           23    11 (fixed)
  2768                           ; jumptable            263     9 (fixed)
  2769                           ;	Chosen strategy is simple_byte
  2770  0147  3A01               	xorlw	1	; case 1
  2771  0148  1903               	skipnz
  2772  0149  2937               	goto	l1471
  2773  014A  3A03               	xorlw	3	; case 2
  2774  014B  1903               	skipnz
  2775  014C  293A               	goto	l1473
  2776  014D  3A01               	xorlw	1	; case 3
  2777  014E  1903               	skipnz
  2778  014F  293D               	goto	l1475
  2779  0150  3A07               	xorlw	7	; case 4
  2780  0151  1903               	skipnz
  2781  0152  2940               	goto	l1477
  2782  0153  2954               	goto	l1483
  2783  0154                     l1483:	
  2784                           
  2785                           ;lcd.h: 128: Lcd_Cmd(data);
  2786  0154  0877               	movf	Lcd_Out2@data,w
  2787  0155  120A  118A  23C0  120A  118A  	fcall	_Lcd_Cmd
  2788  015A                     l1489:	
  2789                           ;lcd.h: 129: while(*buffer)
  2790                           
  2791  015A  0874               	movf	Lcd_Out2@buffer,w
  2792  015B  0084               	movwf	4
  2793  015C  1383               	bcf	3,7	;select IRP bank0
  2794  015D  0800               	movf	0,w
  2795  015E  1903               	btfsc	3,2
  2796  015F  0008               	return
  2797                           
  2798                           ;lcd.h: 130: {;lcd.h: 131: Lcd_Chr_CP(*buffer);
  2799  0160  0874               	movf	Lcd_Out2@buffer,w
  2800  0161  0084               	movwf	4
  2801  0162  0800               	movf	0,w
  2802  0163  120A  118A  246E  120A  118A  	fcall	_Lcd_Chr_CP
  2803                           
  2804                           ;lcd.h: 132: buffer++;
  2805  0168  3001               	movlw	1
  2806  0169  00F5               	movwf	??_Lcd_Out2
  2807  016A  0875               	movf	??_Lcd_Out2,w
  2808  016B  07F4               	addwf	Lcd_Out2@buffer,f
  2809  016C  295A               	goto	l1489
  2810  016D                     __end_of_Lcd_Out2:	
  2811                           
  2812                           	psect	text14
  2813  046E                     __ptext14:	
  2814 ;; *************** function _Lcd_Chr_CP *****************
  2815 ;; Defined at:
  2816 ;;		line 138 in file "lcd.h"
  2817 ;; Parameters:    Size  Location     Type
  2818 ;;  data            1    wreg     unsigned char 
  2819 ;; Auto vars:     Size  Location     Type
  2820 ;;  data            1    2[COMMON] unsigned char 
  2821 ;; Return value:  Size  Location     Type
  2822 ;;                  1    wreg      void 
  2823 ;; Registers used:
  2824 ;;		wreg, status,2, status,0
  2825 ;; Tracked objects:
  2826 ;;		On entry : 800/0
  2827 ;;		On exit  : 0/0
  2828 ;;		Unchanged: 0/0
  2829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2830 ;;      Params:         0       0       0       0       0
  2831 ;;      Locals:         1       0       0       0       0
  2832 ;;      Temps:          2       0       0       0       0
  2833 ;;      Totals:         3       0       0       0       0
  2834 ;;Total ram usage:        3 bytes
  2835 ;; Hardware stack levels used:    1
  2836 ;; This function calls:
  2837 ;;		Nothing
  2838 ;; This function is called by:
  2839 ;;		_Lcd_Out2
  2840 ;; This function uses a non-reentrant model
  2841 ;;
  2842                           
  2843                           
  2844                           ;psect for function _Lcd_Chr_CP
  2845  046E                     _Lcd_Chr_CP:	
  2846                           
  2847                           ;incstack = 0
  2848                           ; Regs used in _Lcd_Chr_CP: [wreg+status,2+status,0]
  2849                           ;Lcd_Chr_CP@data stored from wreg
  2850  046E  00F2               	movwf	Lcd_Chr_CP@data
  2851                           
  2852                           ;lcd.h: 139: PORTBbits.RB2 = 0; PORTBbits.RB0 = 1;
  2853  046F  1283               	bcf	3,5	;RP0=0, select bank0
  2854  0470  1303               	bcf	3,6	;RP1=0, select bank0
  2855  0471  1106               	bcf	6,2	;volatile
  2856  0472  1406               	bsf	6,0	;volatile
  2857                           
  2858                           ;lcd.h: 140: PORTBbits.RB7 = (data & 0b10000000)>>7; PORTBbits.RB6 = (data & 0b01000000)
      +                          >>6;
  2859  0473  0872               	movf	Lcd_Chr_CP@data,w
  2860  0474  00F0               	movwf	??_Lcd_Chr_CP
  2861  0475  3007               	movlw	7
  2862  0476                     u835:	
  2863  0476  1003               	clrc
  2864  0477  0CF0               	rrf	??_Lcd_Chr_CP,f
  2865  0478  3EFF               	addlw	-1
  2866  0479  1D03               	skipz
  2867  047A  2C76               	goto	u835
  2868  047B  0870               	movf	??_Lcd_Chr_CP,w
  2869  047C  3901               	andlw	1
  2870  047D  00F1               	movwf	??_Lcd_Chr_CP+1
  2871  047E  0CF1               	rrf	??_Lcd_Chr_CP+1,f
  2872  047F  0CF1               	rrf	??_Lcd_Chr_CP+1,f
  2873  0480  0806               	movf	6,w	;volatile
  2874  0481  0671               	xorwf	??_Lcd_Chr_CP+1,w
  2875  0482  397F               	andlw	-129
  2876  0483  0671               	xorwf	??_Lcd_Chr_CP+1,w
  2877  0484  0086               	movwf	6	;volatile
  2878  0485  0872               	movf	Lcd_Chr_CP@data,w
  2879  0486  00F0               	movwf	??_Lcd_Chr_CP
  2880  0487  3006               	movlw	6
  2881  0488                     u845:	
  2882  0488  1003               	clrc
  2883  0489  0CF0               	rrf	??_Lcd_Chr_CP,f
  2884  048A  3EFF               	addlw	-1
  2885  048B  1D03               	skipz
  2886  048C  2C88               	goto	u845
  2887  048D  0870               	movf	??_Lcd_Chr_CP,w
  2888  048E  3901               	andlw	1
  2889  048F  00F1               	movwf	??_Lcd_Chr_CP+1
  2890  0490  0EF1               	swapf	??_Lcd_Chr_CP+1,f
  2891  0491  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  2892  0492  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  2893  0493  0806               	movf	6,w	;volatile
  2894  0494  0671               	xorwf	??_Lcd_Chr_CP+1,w
  2895  0495  39BF               	andlw	-65
  2896  0496  0671               	xorwf	??_Lcd_Chr_CP+1,w
  2897  0497  0086               	movwf	6	;volatile
  2898                           
  2899                           ;lcd.h: 141: PORTBbits.RB5 = (data & 0b00100000)>>5; PORTBbits.RB4 = (data & 0b00010000)
      +                          >>4;
  2900  0498  0872               	movf	Lcd_Chr_CP@data,w
  2901  0499  00F0               	movwf	??_Lcd_Chr_CP
  2902  049A  3005               	movlw	5
  2903  049B                     u855:	
  2904  049B  1003               	clrc
  2905  049C  0CF0               	rrf	??_Lcd_Chr_CP,f
  2906  049D  3EFF               	addlw	-1
  2907  049E  1D03               	skipz
  2908  049F  2C9B               	goto	u855
  2909  04A0  0870               	movf	??_Lcd_Chr_CP,w
  2910  04A1  3901               	andlw	1
  2911  04A2  00F1               	movwf	??_Lcd_Chr_CP+1
  2912  04A3  0EF1               	swapf	??_Lcd_Chr_CP+1,f
  2913  04A4  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  2914  04A5  0806               	movf	6,w	;volatile
  2915  04A6  0671               	xorwf	??_Lcd_Chr_CP+1,w
  2916  04A7  39DF               	andlw	-33
  2917  04A8  0671               	xorwf	??_Lcd_Chr_CP+1,w
  2918  04A9  0086               	movwf	6	;volatile
  2919  04AA  0872               	movf	Lcd_Chr_CP@data,w
  2920  04AB  00F0               	movwf	??_Lcd_Chr_CP
  2921  04AC  3004               	movlw	4
  2922  04AD                     u865:	
  2923  04AD  1003               	clrc
  2924  04AE  0CF0               	rrf	??_Lcd_Chr_CP,f
  2925  04AF  3EFF               	addlw	-1
  2926  04B0  1D03               	skipz
  2927  04B1  2CAD               	goto	u865
  2928  04B2  0870               	movf	??_Lcd_Chr_CP,w
  2929  04B3  3901               	andlw	1
  2930  04B4  00F1               	movwf	??_Lcd_Chr_CP+1
  2931  04B5  0EF1               	swapf	??_Lcd_Chr_CP+1,f
  2932  04B6  0806               	movf	6,w	;volatile
  2933  04B7  0671               	xorwf	??_Lcd_Chr_CP+1,w
  2934  04B8  39EF               	andlw	-17
  2935  04B9  0671               	xorwf	??_Lcd_Chr_CP+1,w
  2936  04BA  0086               	movwf	6	;volatile
  2937                           
  2938                           ;lcd.h: 142: _delay(10);
  2939  04BB  3003               	movlw	3
  2940  04BC  00F0               	movwf	??_Lcd_Chr_CP
  2941  04BD                     u1657:	
  2942  04BD  0BF0               	decfsz	??_Lcd_Chr_CP,f
  2943  04BE  2CBD               	goto	u1657
  2944                           
  2945                           ;lcd.h: 143: PORTBbits.RB2 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); PORTBb
      +                          its.RB2 = 0;
  2946  04BF  1283               	bcf	3,5	;RP0=0, select bank0
  2947  04C0  1303               	bcf	3,6	;RP1=0, select bank0
  2948  04C1  1506               	bsf	6,2	;volatile
  2949  04C2  3003               	movlw	3
  2950  04C3  00F0               	movwf	??_Lcd_Chr_CP
  2951  04C4                     u1667:	
  2952  04C4  0BF0               	decfsz	??_Lcd_Chr_CP,f
  2953  04C5  2CC4               	goto	u1667
  2954  04C6  1283               	bcf	3,5	;RP0=0, select bank0
  2955  04C7  1303               	bcf	3,6	;RP1=0, select bank0
  2956  04C8  1106               	bcf	6,2	;volatile
  2957                           
  2958                           ;lcd.h: 144: PORTBbits.RB7 = (data & 0b00001000)>>3; PORTBbits.RB6 = (data & 0b00000100)
      +                          >>2;
  2959  04C9  0872               	movf	Lcd_Chr_CP@data,w
  2960  04CA  00F0               	movwf	??_Lcd_Chr_CP
  2961  04CB  3003               	movlw	3
  2962  04CC                     u875:	
  2963  04CC  1003               	clrc
  2964  04CD  0CF0               	rrf	??_Lcd_Chr_CP,f
  2965  04CE  3EFF               	addlw	-1
  2966  04CF  1D03               	skipz
  2967  04D0  2CCC               	goto	u875
  2968  04D1  0870               	movf	??_Lcd_Chr_CP,w
  2969  04D2  3901               	andlw	1
  2970  04D3  00F1               	movwf	??_Lcd_Chr_CP+1
  2971  04D4  0CF1               	rrf	??_Lcd_Chr_CP+1,f
  2972  04D5  0CF1               	rrf	??_Lcd_Chr_CP+1,f
  2973  04D6  0806               	movf	6,w	;volatile
  2974  04D7  0671               	xorwf	??_Lcd_Chr_CP+1,w
  2975  04D8  397F               	andlw	-129
  2976  04D9  0671               	xorwf	??_Lcd_Chr_CP+1,w
  2977  04DA  0086               	movwf	6	;volatile
  2978  04DB  0872               	movf	Lcd_Chr_CP@data,w
  2979  04DC  00F0               	movwf	??_Lcd_Chr_CP
  2980  04DD  3002               	movlw	2
  2981  04DE                     u885:	
  2982  04DE  1003               	clrc
  2983  04DF  0CF0               	rrf	??_Lcd_Chr_CP,f
  2984  04E0  3EFF               	addlw	-1
  2985  04E1  1D03               	skipz
  2986  04E2  2CDE               	goto	u885
  2987  04E3  0870               	movf	??_Lcd_Chr_CP,w
  2988  04E4  3901               	andlw	1
  2989  04E5  00F1               	movwf	??_Lcd_Chr_CP+1
  2990  04E6  0EF1               	swapf	??_Lcd_Chr_CP+1,f
  2991  04E7  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  2992  04E8  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  2993  04E9  0806               	movf	6,w	;volatile
  2994  04EA  0671               	xorwf	??_Lcd_Chr_CP+1,w
  2995  04EB  39BF               	andlw	-65
  2996  04EC  0671               	xorwf	??_Lcd_Chr_CP+1,w
  2997  04ED  0086               	movwf	6	;volatile
  2998                           
  2999                           ;lcd.h: 145: PORTBbits.RB5 = (data & 0b00000010)>>1; PORTBbits.RB4 = (data & 0b00000001)
      +                          ;
  3000  04EE  0872               	movf	Lcd_Chr_CP@data,w
  3001  04EF  00F0               	movwf	??_Lcd_Chr_CP
  3002  04F0  1003               	clrc
  3003  04F1  0C70               	rrf	??_Lcd_Chr_CP,w
  3004  04F2  3901               	andlw	1
  3005  04F3  00F1               	movwf	??_Lcd_Chr_CP+1
  3006  04F4  0EF1               	swapf	??_Lcd_Chr_CP+1,f
  3007  04F5  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  3008  04F6  0806               	movf	6,w	;volatile
  3009  04F7  0671               	xorwf	??_Lcd_Chr_CP+1,w
  3010  04F8  39DF               	andlw	-33
  3011  04F9  0671               	xorwf	??_Lcd_Chr_CP+1,w
  3012  04FA  0086               	movwf	6	;volatile
  3013  04FB  0872               	movf	Lcd_Chr_CP@data,w
  3014  04FC  3901               	andlw	1
  3015  04FD  00F0               	movwf	??_Lcd_Chr_CP
  3016  04FE  0EF0               	swapf	??_Lcd_Chr_CP,f
  3017  04FF  0806               	movf	6,w	;volatile
  3018  0500  0670               	xorwf	??_Lcd_Chr_CP,w
  3019  0501  39EF               	andlw	-17
  3020  0502  0670               	xorwf	??_Lcd_Chr_CP,w
  3021  0503  0086               	movwf	6	;volatile
  3022                           
  3023                           ;lcd.h: 146: _delay(10);
  3024  0504  3003               	movlw	3
  3025  0505  00F0               	movwf	??_Lcd_Chr_CP
  3026  0506                     u1677:	
  3027  0506  0BF0               	decfsz	??_Lcd_Chr_CP,f
  3028  0507  2D06               	goto	u1677
  3029                           
  3030                           ;lcd.h: 147: PORTBbits.RB2 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); PORTBb
      +                          its.RB2 = 0;
  3031  0508  1283               	bcf	3,5	;RP0=0, select bank0
  3032  0509  1303               	bcf	3,6	;RP1=0, select bank0
  3033  050A  1506               	bsf	6,2	;volatile
  3034  050B  3003               	movlw	3
  3035  050C  00F0               	movwf	??_Lcd_Chr_CP
  3036  050D                     u1687:	
  3037  050D  0BF0               	decfsz	??_Lcd_Chr_CP,f
  3038  050E  2D0D               	goto	u1687
  3039  050F  1283               	bcf	3,5	;RP0=0, select bank0
  3040  0510  1303               	bcf	3,6	;RP1=0, select bank0
  3041  0511  1106               	bcf	6,2	;volatile
  3042                           
  3043                           ;lcd.h: 148: _delay((unsigned long)((5)*(8000000/4000000.0))); _delay((unsigned long)((5
      +                          500)*(8000000/4000000.0)));
  3044  0512  3003               	movlw	3
  3045  0513  00F0               	movwf	??_Lcd_Chr_CP
  3046  0514                     u1697:	
  3047  0514  0BF0               	decfsz	??_Lcd_Chr_CP,f
  3048  0515  2D14               	goto	u1697
  3049  0516  300F               	movlw	15
  3050  0517  00F1               	movwf	??_Lcd_Chr_CP+1
  3051  0518  3047               	movlw	71
  3052  0519  00F0               	movwf	??_Lcd_Chr_CP
  3053  051A                     u1707:	
  3054  051A  0BF0               	decfsz	??_Lcd_Chr_CP,f
  3055  051B  2D1A               	goto	u1707
  3056  051C  0BF1               	decfsz	??_Lcd_Chr_CP+1,f
  3057  051D  2D1A               	goto	u1707
  3058  051E  2D1F               	nop2
  3059  051F  0008               	return
  3060  0520                     __end_of_Lcd_Chr_CP:	
  3061                           
  3062                           	psect	text15
  3063  0314                     __ptext15:	
  3064 ;; *************** function _Lcd_Init *****************
  3065 ;; Defined at:
  3066 ;;		line 54 in file "lcd.h"
  3067 ;; Parameters:    Size  Location     Type
  3068 ;;		None
  3069 ;; Auto vars:     Size  Location     Type
  3070 ;;  data            1    5[COMMON] unsigned char 
  3071 ;; Return value:  Size  Location     Type
  3072 ;;                  1    wreg      void 
  3073 ;; Registers used:
  3074 ;;		wreg, status,2, status,0, pclath, cstack
  3075 ;; Tracked objects:
  3076 ;;		On entry : 0/0
  3077 ;;		On exit  : 0/0
  3078 ;;		Unchanged: 0/0
  3079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3080 ;;      Params:         0       0       0       0       0
  3081 ;;      Locals:         1       0       0       0       0
  3082 ;;      Temps:          2       0       0       0       0
  3083 ;;      Totals:         3       0       0       0       0
  3084 ;;Total ram usage:        3 bytes
  3085 ;; Hardware stack levels used:    1
  3086 ;; Hardware stack levels required when called:    1
  3087 ;; This function calls:
  3088 ;;		_Lcd_Cmd
  3089 ;; This function is called by:
  3090 ;;		_main
  3091 ;; This function uses a non-reentrant model
  3092 ;;
  3093                           
  3094                           
  3095                           ;psect for function _Lcd_Init
  3096  0314                     _Lcd_Init:	
  3097                           
  3098                           ;lcd.h: 55: unsigned char data;;lcd.h: 56: TRISBbits.TRISB7 = 0;
  3099                           
  3100                           ;incstack = 0
  3101                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3102  0314  1683               	bsf	3,5	;RP0=1, select bank1
  3103  0315  1303               	bcf	3,6	;RP1=0, select bank1
  3104  0316  1386               	bcf	6,7	;volatile
  3105                           
  3106                           ;lcd.h: 57: TRISBbits.TRISB6 = 0;
  3107  0317  1306               	bcf	6,6	;volatile
  3108                           
  3109                           ;lcd.h: 58: TRISBbits.TRISB5 = 0;
  3110  0318  1286               	bcf	6,5	;volatile
  3111                           
  3112                           ;lcd.h: 59: TRISBbits.TRISB4 = 0;
  3113  0319  1206               	bcf	6,4	;volatile
  3114                           
  3115                           ;lcd.h: 60: TRISBbits.TRISB2 = 0;
  3116  031A  1106               	bcf	6,2	;volatile
  3117                           
  3118                           ;lcd.h: 61: TRISBbits.TRISB0 = 0;
  3119  031B  1006               	bcf	6,0	;volatile
  3120                           
  3121                           ;lcd.h: 62: PORTBbits.RB7 = 0;
  3122  031C  1283               	bcf	3,5	;RP0=0, select bank0
  3123  031D  1386               	bcf	6,7	;volatile
  3124                           
  3125                           ;lcd.h: 63: PORTBbits.RB6 = 0;
  3126  031E  1306               	bcf	6,6	;volatile
  3127                           
  3128                           ;lcd.h: 64: PORTBbits.RB5 = 0;
  3129  031F  1286               	bcf	6,5	;volatile
  3130                           
  3131                           ;lcd.h: 65: PORTBbits.RB4 = 0;
  3132  0320  1206               	bcf	6,4	;volatile
  3133                           
  3134                           ;lcd.h: 66: PORTBbits.RB2 = 0;
  3135  0321  1106               	bcf	6,2	;volatile
  3136                           
  3137                           ;lcd.h: 67: PORTBbits.RB0 = 0;
  3138  0322  1006               	bcf	6,0	;volatile
  3139                           
  3140                           ;lcd.h: 68: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  3141  0323  300F               	movlw	15
  3142  0324  00F4               	movwf	??_Lcd_Init+1
  3143  0325  3047               	movlw	71
  3144  0326  00F3               	movwf	??_Lcd_Init
  3145  0327                     u1717:	
  3146  0327  0BF3               	decfsz	??_Lcd_Init,f
  3147  0328  2B27               	goto	u1717
  3148  0329  0BF4               	decfsz	??_Lcd_Init+1,f
  3149  032A  2B27               	goto	u1717
  3150  032B  2B2C               	nop2
  3151                           
  3152                           ;lcd.h: 69: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  3153  032C  300F               	movlw	15
  3154  032D  00F4               	movwf	??_Lcd_Init+1
  3155  032E  3047               	movlw	71
  3156  032F  00F3               	movwf	??_Lcd_Init
  3157  0330                     u1727:	
  3158  0330  0BF3               	decfsz	??_Lcd_Init,f
  3159  0331  2B30               	goto	u1727
  3160  0332  0BF4               	decfsz	??_Lcd_Init+1,f
  3161  0333  2B30               	goto	u1727
  3162  0334  2B35               	nop2
  3163                           
  3164                           ;lcd.h: 70: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  3165  0335  300F               	movlw	15
  3166  0336  00F4               	movwf	??_Lcd_Init+1
  3167  0337  3047               	movlw	71
  3168  0338  00F3               	movwf	??_Lcd_Init
  3169  0339                     u1737:	
  3170  0339  0BF3               	decfsz	??_Lcd_Init,f
  3171  033A  2B39               	goto	u1737
  3172  033B  0BF4               	decfsz	??_Lcd_Init+1,f
  3173  033C  2B39               	goto	u1737
  3174  033D  2B3E               	nop2
  3175                           
  3176                           ;lcd.h: 71: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  3177  033E  300F               	movlw	15
  3178  033F  00F4               	movwf	??_Lcd_Init+1
  3179  0340  3047               	movlw	71
  3180  0341  00F3               	movwf	??_Lcd_Init
  3181  0342                     u1747:	
  3182  0342  0BF3               	decfsz	??_Lcd_Init,f
  3183  0343  2B42               	goto	u1747
  3184  0344  0BF4               	decfsz	??_Lcd_Init+1,f
  3185  0345  2B42               	goto	u1747
  3186  0346  2B47               	nop2
  3187                           
  3188                           ;lcd.h: 72: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  3189  0347  300F               	movlw	15
  3190  0348  00F4               	movwf	??_Lcd_Init+1
  3191  0349  3047               	movlw	71
  3192  034A  00F3               	movwf	??_Lcd_Init
  3193  034B                     u1757:	
  3194  034B  0BF3               	decfsz	??_Lcd_Init,f
  3195  034C  2B4B               	goto	u1757
  3196  034D  0BF4               	decfsz	??_Lcd_Init+1,f
  3197  034E  2B4B               	goto	u1757
  3198  034F  2B50               	nop2
  3199                           
  3200                           ;lcd.h: 73: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  3201  0350  300F               	movlw	15
  3202  0351  00F4               	movwf	??_Lcd_Init+1
  3203  0352  3047               	movlw	71
  3204  0353  00F3               	movwf	??_Lcd_Init
  3205  0354                     u1767:	
  3206  0354  0BF3               	decfsz	??_Lcd_Init,f
  3207  0355  2B54               	goto	u1767
  3208  0356  0BF4               	decfsz	??_Lcd_Init+1,f
  3209  0357  2B54               	goto	u1767
  3210  0358  2B59               	nop2
  3211                           
  3212                           ;lcd.h: 74: for(data = 1; data < 4; data ++)
  3213  0359  01F5               	clrf	Lcd_Init@data
  3214  035A  0AF5               	incf	Lcd_Init@data,f
  3215  035B                     l59:	
  3216                           
  3217                           ;lcd.h: 75: {;lcd.h: 76: PORTBbits.RB7 = 0; PORTBbits.RB6 = 0; PORTBbits.RB5 = 1; PORTBb
      +                          its.RB4 = 1; PORTBbits.RB2 = 0;
  3218  035B  1283               	bcf	3,5	;RP0=0, select bank0
  3219  035C  1303               	bcf	3,6	;RP1=0, select bank0
  3220  035D  1386               	bcf	6,7	;volatile
  3221  035E  1306               	bcf	6,6	;volatile
  3222  035F  1686               	bsf	6,5	;volatile
  3223  0360  1606               	bsf	6,4	;volatile
  3224  0361  1106               	bcf	6,2	;volatile
  3225                           
  3226                           ;lcd.h: 77: PORTBbits.RB0 = 0; PORTBbits.RB7 = 0; PORTBbits.RB6 = 0; PORTBbits.RB5 = 1; 
      +                          PORTBbits.RB4 = 1;
  3227  0362  1006               	bcf	6,0	;volatile
  3228  0363  1386               	bcf	6,7	;volatile
  3229  0364  1306               	bcf	6,6	;volatile
  3230  0365  1686               	bsf	6,5	;volatile
  3231  0366  1606               	bsf	6,4	;volatile
  3232                           
  3233                           ;lcd.h: 78: PORTBbits.RB2 = 1; PORTBbits.RB0 = 0;
  3234  0367  1506               	bsf	6,2	;volatile
  3235  0368  1006               	bcf	6,0	;volatile
  3236                           
  3237                           ;lcd.h: 79: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3238  0369  3003               	movlw	3
  3239  036A  00F3               	movwf	??_Lcd_Init
  3240  036B                     u1777:	
  3241  036B  0BF3               	decfsz	??_Lcd_Init,f
  3242  036C  2B6B               	goto	u1777
  3243                           
  3244                           ;lcd.h: 80: PORTBbits.RB7 = 0; PORTBbits.RB6 = 0; PORTBbits.RB5 = 1; PORTBbits.RB4 = 1; 
      +                          PORTBbits.RB2 = 0;
  3245  036D  1283               	bcf	3,5	;RP0=0, select bank0
  3246  036E  1303               	bcf	3,6	;RP1=0, select bank0
  3247  036F  1386               	bcf	6,7	;volatile
  3248  0370  1306               	bcf	6,6	;volatile
  3249  0371  1686               	bsf	6,5	;volatile
  3250  0372  1606               	bsf	6,4	;volatile
  3251  0373  1106               	bcf	6,2	;volatile
  3252                           
  3253                           ;lcd.h: 81: PORTBbits.RB0 = 0;
  3254  0374  1006               	bcf	6,0	;volatile
  3255                           
  3256                           ;lcd.h: 82: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  3257  0375  300F               	movlw	15
  3258  0376  00F4               	movwf	??_Lcd_Init+1
  3259  0377  3047               	movlw	71
  3260  0378  00F3               	movwf	??_Lcd_Init
  3261  0379                     u1787:	
  3262  0379  0BF3               	decfsz	??_Lcd_Init,f
  3263  037A  2B79               	goto	u1787
  3264  037B  0BF4               	decfsz	??_Lcd_Init+1,f
  3265  037C  2B79               	goto	u1787
  3266  037D  2B7E               	nop2
  3267  037E  3001               	movlw	1
  3268  037F  00F3               	movwf	??_Lcd_Init
  3269  0380  0873               	movf	??_Lcd_Init,w
  3270  0381  07F5               	addwf	Lcd_Init@data,f
  3271  0382  3004               	movlw	4
  3272  0383  0275               	subwf	Lcd_Init@data,w
  3273  0384  1C03               	skipc
  3274  0385  2B5B               	goto	l59
  3275                           
  3276                           ;lcd.h: 83: };lcd.h: 84: PORTBbits.RB7 = 0; PORTBbits.RB6 = 0; PORTBbits.RB5 = 1; PORTBb
      +                          its.RB4 = 0; PORTBbits.RB2 = 0; PORTBbits.RB0 = 0;
  3277  0386  1283               	bcf	3,5	;RP0=0, select bank0
  3278  0387  1303               	bcf	3,6	;RP1=0, select bank0
  3279  0388  1386               	bcf	6,7	;volatile
  3280  0389  1306               	bcf	6,6	;volatile
  3281  038A  1686               	bsf	6,5	;volatile
  3282  038B  1206               	bcf	6,4	;volatile
  3283  038C  1106               	bcf	6,2	;volatile
  3284  038D  1006               	bcf	6,0	;volatile
  3285                           
  3286                           ;lcd.h: 85: PORTBbits.RB7 = 0; PORTBbits.RB6 = 0; PORTBbits.RB5 = 1; PORTBbits.RB4 = 0; 
      +                          PORTBbits.RB2 = 1; PORTBbits.RB0 = 0;
  3287  038E  1386               	bcf	6,7	;volatile
  3288  038F  1306               	bcf	6,6	;volatile
  3289  0390  1686               	bsf	6,5	;volatile
  3290  0391  1206               	bcf	6,4	;volatile
  3291  0392  1506               	bsf	6,2	;volatile
  3292  0393  1006               	bcf	6,0	;volatile
  3293                           
  3294                           ;lcd.h: 86: _delay((unsigned long)((5)*(8000000/4000000.0)));
  3295  0394  3003               	movlw	3
  3296  0395  00F3               	movwf	??_Lcd_Init
  3297  0396                     u1797:	
  3298  0396  0BF3               	decfsz	??_Lcd_Init,f
  3299  0397  2B96               	goto	u1797
  3300                           
  3301                           ;lcd.h: 87: PORTBbits.RB7 = 0; PORTBbits.RB6 = 0; PORTBbits.RB5 = 1; PORTBbits.RB4 = 0; 
      +                          PORTBbits.RB2 = 0; PORTBbits.RB0 = 0;
  3302  0398  1283               	bcf	3,5	;RP0=0, select bank0
  3303  0399  1303               	bcf	3,6	;RP1=0, select bank0
  3304  039A  1386               	bcf	6,7	;volatile
  3305  039B  1306               	bcf	6,6	;volatile
  3306  039C  1686               	bsf	6,5	;volatile
  3307  039D  1206               	bcf	6,4	;volatile
  3308  039E  1106               	bcf	6,2	;volatile
  3309  039F  1006               	bcf	6,0	;volatile
  3310                           
  3311                           ;lcd.h: 88: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  3312  03A0  300F               	movlw	15
  3313  03A1  00F4               	movwf	??_Lcd_Init+1
  3314  03A2  3047               	movlw	71
  3315  03A3  00F3               	movwf	??_Lcd_Init
  3316  03A4                     u1807:	
  3317  03A4  0BF3               	decfsz	??_Lcd_Init,f
  3318  03A5  2BA4               	goto	u1807
  3319  03A6  0BF4               	decfsz	??_Lcd_Init+1,f
  3320  03A7  2BA4               	goto	u1807
  3321  03A8  2BA9               	nop2
  3322  03A9  3028               	movlw	40
  3323  03AA  120A  118A  23C0  120A  118A  	fcall	_Lcd_Cmd
  3324  03AF  3010               	movlw	16
  3325  03B0  120A  118A  23C0  120A  118A  	fcall	_Lcd_Cmd
  3326  03B5  3001               	movlw	1
  3327  03B6  120A  118A  23C0  120A  118A  	fcall	_Lcd_Cmd
  3328  03BB  300F               	movlw	15
  3329  03BC  120A  118A  23C0   	fcall	_Lcd_Cmd
  3330  03BF  0008               	return
  3331  03C0                     __end_of_Lcd_Init:	
  3332                           
  3333                           	psect	text16
  3334  03C0                     __ptext16:	
  3335 ;; *************** function _Lcd_Cmd *****************
  3336 ;; Defined at:
  3337 ;;		line 152 in file "lcd.h"
  3338 ;; Parameters:    Size  Location     Type
  3339 ;;  data            1    wreg     unsigned char 
  3340 ;; Auto vars:     Size  Location     Type
  3341 ;;  data            1    2[COMMON] unsigned char 
  3342 ;; Return value:  Size  Location     Type
  3343 ;;                  1    wreg      void 
  3344 ;; Registers used:
  3345 ;;		wreg, status,2, status,0
  3346 ;; Tracked objects:
  3347 ;;		On entry : 0/0
  3348 ;;		On exit  : 0/0
  3349 ;;		Unchanged: 0/0
  3350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3351 ;;      Params:         0       0       0       0       0
  3352 ;;      Locals:         1       0       0       0       0
  3353 ;;      Temps:          2       0       0       0       0
  3354 ;;      Totals:         3       0       0       0       0
  3355 ;;Total ram usage:        3 bytes
  3356 ;; Hardware stack levels used:    1
  3357 ;; This function calls:
  3358 ;;		Nothing
  3359 ;; This function is called by:
  3360 ;;		_Lcd_Init
  3361 ;;		_Lcd_Out2
  3362 ;;		_main
  3363 ;; This function uses a non-reentrant model
  3364 ;;
  3365                           
  3366                           
  3367                           ;psect for function _Lcd_Cmd
  3368  03C0                     _Lcd_Cmd:	
  3369                           
  3370                           ;incstack = 0
  3371                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0]
  3372                           ;Lcd_Cmd@data stored from wreg
  3373  03C0  00F2               	movwf	Lcd_Cmd@data
  3374                           
  3375                           ;lcd.h: 153: PORTBbits.RB2 = 0; PORTBbits.RB0 = 0;
  3376  03C1  1283               	bcf	3,5	;RP0=0, select bank0
  3377  03C2  1303               	bcf	3,6	;RP1=0, select bank0
  3378  03C3  1106               	bcf	6,2	;volatile
  3379  03C4  1006               	bcf	6,0	;volatile
  3380                           
  3381                           ;lcd.h: 154: PORTBbits.RB7 = (data & 0b10000000)>>7; PORTBbits.RB6 = (data & 0b01000000)
      +                          >>6;
  3382  03C5  0872               	movf	Lcd_Cmd@data,w
  3383  03C6  00F0               	movwf	??_Lcd_Cmd
  3384  03C7  3007               	movlw	7
  3385  03C8                     u775:	
  3386  03C8  1003               	clrc
  3387  03C9  0CF0               	rrf	??_Lcd_Cmd,f
  3388  03CA  3EFF               	addlw	-1
  3389  03CB  1D03               	skipz
  3390  03CC  2BC8               	goto	u775
  3391  03CD  0870               	movf	??_Lcd_Cmd,w
  3392  03CE  3901               	andlw	1
  3393  03CF  00F1               	movwf	??_Lcd_Cmd+1
  3394  03D0  0CF1               	rrf	??_Lcd_Cmd+1,f
  3395  03D1  0CF1               	rrf	??_Lcd_Cmd+1,f
  3396  03D2  0806               	movf	6,w	;volatile
  3397  03D3  0671               	xorwf	??_Lcd_Cmd+1,w
  3398  03D4  397F               	andlw	-129
  3399  03D5  0671               	xorwf	??_Lcd_Cmd+1,w
  3400  03D6  0086               	movwf	6	;volatile
  3401  03D7  0872               	movf	Lcd_Cmd@data,w
  3402  03D8  00F0               	movwf	??_Lcd_Cmd
  3403  03D9  3006               	movlw	6
  3404  03DA                     u785:	
  3405  03DA  1003               	clrc
  3406  03DB  0CF0               	rrf	??_Lcd_Cmd,f
  3407  03DC  3EFF               	addlw	-1
  3408  03DD  1D03               	skipz
  3409  03DE  2BDA               	goto	u785
  3410  03DF  0870               	movf	??_Lcd_Cmd,w
  3411  03E0  3901               	andlw	1
  3412  03E1  00F1               	movwf	??_Lcd_Cmd+1
  3413  03E2  0EF1               	swapf	??_Lcd_Cmd+1,f
  3414  03E3  0DF1               	rlf	??_Lcd_Cmd+1,f
  3415  03E4  0DF1               	rlf	??_Lcd_Cmd+1,f
  3416  03E5  0806               	movf	6,w	;volatile
  3417  03E6  0671               	xorwf	??_Lcd_Cmd+1,w
  3418  03E7  39BF               	andlw	-65
  3419  03E8  0671               	xorwf	??_Lcd_Cmd+1,w
  3420  03E9  0086               	movwf	6	;volatile
  3421                           
  3422                           ;lcd.h: 155: PORTBbits.RB5 = (data & 0b00100000)>>5; PORTBbits.RB4 = (data & 0b00010000)
      +                          >>4;
  3423  03EA  0872               	movf	Lcd_Cmd@data,w
  3424  03EB  00F0               	movwf	??_Lcd_Cmd
  3425  03EC  3005               	movlw	5
  3426  03ED                     u795:	
  3427  03ED  1003               	clrc
  3428  03EE  0CF0               	rrf	??_Lcd_Cmd,f
  3429  03EF  3EFF               	addlw	-1
  3430  03F0  1D03               	skipz
  3431  03F1  2BED               	goto	u795
  3432  03F2  0870               	movf	??_Lcd_Cmd,w
  3433  03F3  3901               	andlw	1
  3434  03F4  00F1               	movwf	??_Lcd_Cmd+1
  3435  03F5  0EF1               	swapf	??_Lcd_Cmd+1,f
  3436  03F6  0DF1               	rlf	??_Lcd_Cmd+1,f
  3437  03F7  0806               	movf	6,w	;volatile
  3438  03F8  0671               	xorwf	??_Lcd_Cmd+1,w
  3439  03F9  39DF               	andlw	-33
  3440  03FA  0671               	xorwf	??_Lcd_Cmd+1,w
  3441  03FB  0086               	movwf	6	;volatile
  3442  03FC  0872               	movf	Lcd_Cmd@data,w
  3443  03FD  00F0               	movwf	??_Lcd_Cmd
  3444  03FE  3004               	movlw	4
  3445  03FF                     u805:	
  3446  03FF  1003               	clrc
  3447  0400  0CF0               	rrf	??_Lcd_Cmd,f
  3448  0401  3EFF               	addlw	-1
  3449  0402  1D03               	skipz
  3450  0403  2BFF               	goto	u805
  3451  0404  0870               	movf	??_Lcd_Cmd,w
  3452  0405  3901               	andlw	1
  3453  0406  00F1               	movwf	??_Lcd_Cmd+1
  3454  0407  0EF1               	swapf	??_Lcd_Cmd+1,f
  3455  0408  0806               	movf	6,w	;volatile
  3456  0409  0671               	xorwf	??_Lcd_Cmd+1,w
  3457  040A  39EF               	andlw	-17
  3458  040B  0671               	xorwf	??_Lcd_Cmd+1,w
  3459  040C  0086               	movwf	6	;volatile
  3460                           
  3461                           ;lcd.h: 156: _delay(10);
  3462  040D  3003               	movlw	3
  3463  040E  00F0               	movwf	??_Lcd_Cmd
  3464  040F                     u1817:	
  3465  040F  0BF0               	decfsz	??_Lcd_Cmd,f
  3466  0410  2C0F               	goto	u1817
  3467                           
  3468                           ;lcd.h: 157: PORTBbits.RB2 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); PORTBb
      +                          its.RB2 = 0;
  3469  0411  1283               	bcf	3,5	;RP0=0, select bank0
  3470  0412  1303               	bcf	3,6	;RP1=0, select bank0
  3471  0413  1506               	bsf	6,2	;volatile
  3472  0414  3003               	movlw	3
  3473  0415  00F0               	movwf	??_Lcd_Cmd
  3474  0416                     u1827:	
  3475  0416  0BF0               	decfsz	??_Lcd_Cmd,f
  3476  0417  2C16               	goto	u1827
  3477  0418  1283               	bcf	3,5	;RP0=0, select bank0
  3478  0419  1303               	bcf	3,6	;RP1=0, select bank0
  3479  041A  1106               	bcf	6,2	;volatile
  3480                           
  3481                           ;lcd.h: 158: PORTBbits.RB7 = (data & 0b00001000)>>3; PORTBbits.RB6 = (data & 0b00000100)
      +                          >>2;
  3482  041B  0872               	movf	Lcd_Cmd@data,w
  3483  041C  00F0               	movwf	??_Lcd_Cmd
  3484  041D  3003               	movlw	3
  3485  041E                     u815:	
  3486  041E  1003               	clrc
  3487  041F  0CF0               	rrf	??_Lcd_Cmd,f
  3488  0420  3EFF               	addlw	-1
  3489  0421  1D03               	skipz
  3490  0422  2C1E               	goto	u815
  3491  0423  0870               	movf	??_Lcd_Cmd,w
  3492  0424  3901               	andlw	1
  3493  0425  00F1               	movwf	??_Lcd_Cmd+1
  3494  0426  0CF1               	rrf	??_Lcd_Cmd+1,f
  3495  0427  0CF1               	rrf	??_Lcd_Cmd+1,f
  3496  0428  0806               	movf	6,w	;volatile
  3497  0429  0671               	xorwf	??_Lcd_Cmd+1,w
  3498  042A  397F               	andlw	-129
  3499  042B  0671               	xorwf	??_Lcd_Cmd+1,w
  3500  042C  0086               	movwf	6	;volatile
  3501  042D  0872               	movf	Lcd_Cmd@data,w
  3502  042E  00F0               	movwf	??_Lcd_Cmd
  3503  042F  3002               	movlw	2
  3504  0430                     u825:	
  3505  0430  1003               	clrc
  3506  0431  0CF0               	rrf	??_Lcd_Cmd,f
  3507  0432  3EFF               	addlw	-1
  3508  0433  1D03               	skipz
  3509  0434  2C30               	goto	u825
  3510  0435  0870               	movf	??_Lcd_Cmd,w
  3511  0436  3901               	andlw	1
  3512  0437  00F1               	movwf	??_Lcd_Cmd+1
  3513  0438  0EF1               	swapf	??_Lcd_Cmd+1,f
  3514  0439  0DF1               	rlf	??_Lcd_Cmd+1,f
  3515  043A  0DF1               	rlf	??_Lcd_Cmd+1,f
  3516  043B  0806               	movf	6,w	;volatile
  3517  043C  0671               	xorwf	??_Lcd_Cmd+1,w
  3518  043D  39BF               	andlw	-65
  3519  043E  0671               	xorwf	??_Lcd_Cmd+1,w
  3520  043F  0086               	movwf	6	;volatile
  3521                           
  3522                           ;lcd.h: 159: PORTBbits.RB5 = (data & 0b00000010)>>1; PORTBbits.RB4 = (data & 0b00000001)
      +                          ;
  3523  0440  0872               	movf	Lcd_Cmd@data,w
  3524  0441  00F0               	movwf	??_Lcd_Cmd
  3525  0442  1003               	clrc
  3526  0443  0C70               	rrf	??_Lcd_Cmd,w
  3527  0444  3901               	andlw	1
  3528  0445  00F1               	movwf	??_Lcd_Cmd+1
  3529  0446  0EF1               	swapf	??_Lcd_Cmd+1,f
  3530  0447  0DF1               	rlf	??_Lcd_Cmd+1,f
  3531  0448  0806               	movf	6,w	;volatile
  3532  0449  0671               	xorwf	??_Lcd_Cmd+1,w
  3533  044A  39DF               	andlw	-33
  3534  044B  0671               	xorwf	??_Lcd_Cmd+1,w
  3535  044C  0086               	movwf	6	;volatile
  3536  044D  0872               	movf	Lcd_Cmd@data,w
  3537  044E  3901               	andlw	1
  3538  044F  00F0               	movwf	??_Lcd_Cmd
  3539  0450  0EF0               	swapf	??_Lcd_Cmd,f
  3540  0451  0806               	movf	6,w	;volatile
  3541  0452  0670               	xorwf	??_Lcd_Cmd,w
  3542  0453  39EF               	andlw	-17
  3543  0454  0670               	xorwf	??_Lcd_Cmd,w
  3544  0455  0086               	movwf	6	;volatile
  3545                           
  3546                           ;lcd.h: 160: _delay(10);
  3547  0456  3003               	movlw	3
  3548  0457  00F0               	movwf	??_Lcd_Cmd
  3549  0458                     u1837:	
  3550  0458  0BF0               	decfsz	??_Lcd_Cmd,f
  3551  0459  2C58               	goto	u1837
  3552                           
  3553                           ;lcd.h: 161: PORTBbits.RB2 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); PORTBb
      +                          its.RB2 = 0;
  3554  045A  1283               	bcf	3,5	;RP0=0, select bank0
  3555  045B  1303               	bcf	3,6	;RP1=0, select bank0
  3556  045C  1506               	bsf	6,2	;volatile
  3557  045D  3003               	movlw	3
  3558  045E  00F0               	movwf	??_Lcd_Cmd
  3559  045F                     u1847:	
  3560  045F  0BF0               	decfsz	??_Lcd_Cmd,f
  3561  0460  2C5F               	goto	u1847
  3562  0461  1283               	bcf	3,5	;RP0=0, select bank0
  3563  0462  1303               	bcf	3,6	;RP1=0, select bank0
  3564  0463  1106               	bcf	6,2	;volatile
  3565                           
  3566                           ;lcd.h: 162: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  3567  0464  300F               	movlw	15
  3568  0465  00F1               	movwf	??_Lcd_Cmd+1
  3569  0466  3047               	movlw	71
  3570  0467  00F0               	movwf	??_Lcd_Cmd
  3571  0468                     u1857:	
  3572  0468  0BF0               	decfsz	??_Lcd_Cmd,f
  3573  0469  2C68               	goto	u1857
  3574  046A  0BF1               	decfsz	??_Lcd_Cmd+1,f
  3575  046B  2C68               	goto	u1857
  3576  046C  2C6D               	nop2
  3577  046D  0008               	return
  3578  046E                     __end_of_Lcd_Cmd:	
  3579  007E                     btemp	set	126	;btemp
  3580  007E                     wtemp0	set	126


Data Sizes:
    Strings     35
    Constant    36
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     37      37
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 12
		 -> STR_5(CODE[9]), STR_3(CODE[9]), STR_1(CODE[12]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 16
		 -> main@bufferLCD(BANK0[16]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    UART_Print@data	PTR const unsigned char  size(2) Largest target is 26
		 -> STR_6(CODE[3]), STR_4(CODE[2]), STR_2(CODE[2]), main@bufferLCD(BANK0[16]), 
		 -> message(CODE[26]), 

    Lcd_Out2@buffer	PTR unsigned char  size(1) Largest target is 16
		 -> main@bufferLCD(BANK0[16]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _UART_Print->_UART_PutC
    _UART_Init->___lldiv
    _Lcd_Out2->_Lcd_Chr_CP
    _Lcd_Out2->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0    5174
                                             15 BANK0     22    22      0
                            _Lcd_Cmd
                           _Lcd_Init
                           _Lcd_Out2
                    _UART_Data_Ready
                          _UART_GetC
                          _UART_Init
                         _UART_Print
                          _UART_PutC
                            _readADC
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             23    20      3    2055
                                              0 BANK0     15    12      3
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     220
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     287
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     290
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _readADC                                              7     5      2     182
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _UART_Print                                           4     2      2     560
                                              1 COMMON     4     2      2
                          _UART_PutC
 ---------------------------------------------------------------------------------
 (1) _UART_PutC                                            1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           10     6      4     640
                                              0 BANK0     10     6      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     418
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _UART_GetC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Data_Ready                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out2                                             5     3      2     917
                                              3 COMMON     5     3      2
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Chr_CP                                           3     3      0     176
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             3     3      0     314
                                              3 COMMON     3     3      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     176
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out2
     _Lcd_Chr_CP
     _Lcd_Cmd
   _UART_Data_Ready
   _UART_GetC
   _UART_Init
     ___lldiv
   _UART_Print
     _UART_PutC
   _UART_PutC
   _readADC
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     25      25       5       46.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Aug 03 18:54:06 2019

                       pc 0002               __CFG_CP$OFF 0000                        l59 035B  
                      l98 0302                        fsr 0004       ___wmul@multiplicand 0072  
                     l113 00A5                       l106 009C                       l140 025E  
                     l141 0250                       l144 027F                       l136 023E  
                     l145 0271                       l137 0230                       l246 0699  
                     l264 074C                       l285 00C4              __CFG_CPD$OFF 0000  
                     u805 03FF                       u815 041E                       u825 0430  
                     u835 0476                       u845 0488                       u775 03C8  
                     u855 049B                       u935 00C5                       u785 03DA  
                     u865 04AD                       u945 00CC                       u795 03ED  
                     u875 04CC                       u885 04DE                       u975 01BD  
                     u995 01CB                       fsr0 0004                       indf 0000  
            __CFG_IESO$ON 0000              __CFG_LVP$OFF 0000                      l1411 0125  
                    l1405 0109                      l1511 009A                      l1407 0117  
                    l1415 0130                      l1335 00BC                      l1353 01B9  
                    l1505 0309                      l1329 00B8                      l1363 01F1  
                    l1355 01C9                      l1381 0175                      l1471 0137  
                    l1519 00A2                      l1367 01FE                      l1383 0183  
                    l1631 073E                      l1607 06EF                      l1473 013A  
                    l1481 0146                      l1529 00DC                      l1393 01A4  
                    l1641 0765                      l1625 071D                      l1609 0704  
                    l1721 0586                      l1475 013D                      l1483 0154  
                    l1619 071B                      l1477 0140                      l1389 0199  
                    l1671 07B4                      l1639 0761                      l1591 069E  
                    l1489 015A                      l1497 02B6                      l1665 07A5  
                    l1649 0776                      l1657 078C                      l1593 06A9  
                    l1585 0695                      l1681 0675                      l1659 0790  
                    l1683 07F7                      l1597 06B9                      l1679 07B8  
                    STR_1 0037                      STR_2 0058                      STR_3 0043  
                    STR_4 0058                      STR_5 004C                      STR_6 0055  
                    _CREN 00C4                      u1005 01E0                      u1015 01F2  
                    u1115 010C                      u1205 02BF                      u1045 0178  
                    u1215 02CC                      u1135 011D                      u1225 02FA  
                    u1065 0184                      u1145 0126                      u1075 0190  
                    u1085 019A                      u1185 028D                      u1425 0753  
                    u1275 0216                      u1607 022E                      u1617 0240  
                    u1385 0734                      u1537 0548                      u1707 051A  
                    u1627 024E                      u1547 0560                      u1717 0327  
                    u1637 0260                      u1557 057F                      u1807 03A4  
                    u1727 0330                      u1647 026F                      u1567 05BD  
                    u1817 040F                      u1737 0339                      u1657 04BD  
                    u1577 0603                      u1827 0416                      u1747 0342  
                    u1667 04C4                      u1587 064B                      u1837 0458  
                    u1757 034B                      u1677 0506                      u1597 0222  
                    u1847 045F                      u1767 0354                      u1687 050D  
                    u1857 0468                      u1777 036B                      u1697 0514  
                    u1787 0379                      u1797 0396                      _RCIF 0065  
                    _OERR 00C1                      _TRMT 04C1              __CFG_WRT$OFF 0000  
           __CFG_FCMEN$ON 0000                      _main 0520                      btemp 007E  
                    start 0000           __end_of_Lcd_Cmd 046E                _Lcd_Chr_CP 046E  
          Lcd_Out2@buffer 0074                     ?_main 0070             __CFG_WDTE$OFF 0000  
         __end_of___lldiv 0207            __CFG_DEBUG$OFF 0000           __end_of___lwdiv 01A9  
         __end_of___lwmod 0135                     _RCREG 001A                     _RCSTA 0018  
                   _SPBRG 0099                     _TRISA 0085                     _TRISB 0086  
                   _TXREG 0019                     _TXSTA 0098               ?_UART_Print 0071  
      __size_of_UART_GetC 0008        __size_of_UART_Init 0090        __size_of_UART_PutC 0008  
         __end_of_readADC 0284           __end_of_dpowers 001D           __end_of_isdigit 00BA  
         __end_of_message 0037                     main@c 0042            __CFG_BOREN$OFF 0000  
                   pclath 000A                     status 0003                     wtemp0 007E  
         __end_of_sprintf 07FC          __end_of_Lcd_Init 03C0          __end_of_Lcd_Out2 016D  
          __CFG_MCLRE$OFF 0000           __initialization 07FC              __end_of_main 0670  
                  ??_main 002F             main@bufferLCD 0032                    _ADCON0 001F  
                  _ADCON1 009F                    _ADRESH 001E                    _ADRESL 009E  
                  _ANSELH 0189                    _OSCCON 008F                 ??_Lcd_Cmd 0070  
          __CFG_PWRTE$OFF 0000         __end_of_UART_GetC 00A4         __end_of_UART_Init 0314  
       __end_of_UART_PutC 00AC       __size_of_UART_Print 0028               ?_Lcd_Chr_CP 0070  
                  ___wmul 00BA                 ??___lldiv 0078                 ??___lwdiv 0074  
               ??___lwmod 007C                 ??_readADC 0072                 ??_isdigit 0070  
               ??_sprintf 0023   __end_of__initialization 07FC            __pcstackCOMMON 0070  
               ?_Lcd_Init 0070                 ?_Lcd_Out2 0073              sprintf@width 002B  
     __size_of_Lcd_Chr_CP 00B2  __size_of_UART_Data_Ready 0006                __pmaintext 0520  
                 ?___wmul 0070              ??_UART_Print 0073                ??_Lcd_Init 0073  
              ??_Lcd_Out2 0075                __stringtab 0003                   _Lcd_Cmd 03C0  
      __end_of_UART_Print 0103                   ___lldiv 01A9           __size_of___wmul 0021  
                 ___lwdiv 016D                   ___lwmod 0103                 _ANSELbits 0188  
                 __ptext1 0670                   __ptext2 00AC                   __ptext3 00BA  
                 __ptext4 0103                   __ptext5 016D                   __ptext6 0207  
                 __ptext7 00DB                   __ptext8 00A4                   __ptext9 0284  
                 _readADC 0207                   _dpowers 0013                   _isdigit 00AC  
                 _message 001D               UART_Print@i 0074            UART_Print@data 0071  
                 main@adc 0043                   _sprintf 0670      end_of_initialization 07FC  
         ___lldiv@divisor 0070           ___lldiv@counter 007D              ??_Lcd_Chr_CP 0070  
               Lcd_Out2@x 0073                 Lcd_Out2@y 0076         ??_UART_Data_Ready 0070  
               _UART_GetC 009C                 _UART_Init 0284                 _UART_PutC 00A4  
               _PORTBbits 0006        UART_Init@baud_rate 0020                 _TRISAbits 0085  
               _TRISBbits 0086                 _TRISCbits 0087        __end_of_Lcd_Chr_CP 0520  
          __end_of___wmul 00DB                ?_UART_GetC 0070                ?_UART_Init 0020  
              ?_UART_PutC 0070                readADC@adc 0075       start_initialization 07FC  
       __size_of_Lcd_Init 00AC         __size_of_Lcd_Out2 0038  __CFG_FOSC$INTRC_NOCLKOUT 0000  
                ??___wmul 0074                 ___latbits 0002             __pcstackBANK0 0020  
                ?_Lcd_Cmd 0070               sprintf@flag 002A               sprintf@prec 0027  
        ___lwdiv@dividend 0072                  ?___lldiv 0070                  ?___lwdiv 0070  
                ?___lwmod 0078               ??_UART_GetC 0070               ??_UART_Init 0024  
             ??_UART_PutC 0070                 __pstrings 0003                  ?_readADC 0070  
                ?_isdigit 0070             UART_PutC@data 0070          ___lwdiv@quotient 0075  
                ?_sprintf 0020                UART_Init@n 0028            ___wmul@product 0074  
         _UART_Data_Ready 0096              Lcd_Init@data 0075                _ADCON0bits 001F  
             __stringbase 0012         ___wmul@multiplier 0070              Lcd_Out2@data 0077  
                _Lcd_Init 0314                  _Lcd_Out2 0135          __size_of_Lcd_Cmd 00AE  
        __size_of___lldiv 005E          __size_of___lwdiv 003C          __size_of___lwmod 0032  
          readADC@channel 0074        __end_of__stringtab 0013               _isdigit$717 0070  
              sprintf@val 0028          __size_of_readADC 007D          __size_of_isdigit 000E  
          Lcd_Chr_CP@data 0072           ___lwdiv@divisor 0070           ___lwdiv@counter 0077  
                __ptext10 01A9                  __ptext11 009C                  __ptext12 0096  
                __ptext13 0135                  __ptext14 046E                  __ptext15 0314  
                __ptext16 03C0   __end_of_UART_Data_Ready 009C         __CFG_BOR4V$BOR40V 0000  
        __size_of_sprintf 018C               Lcd_Cmd@data 0072             __size_of_main 0150  
                isdigit@c 0071                 sprintf@ap 0026                 sprintf@sp 002D  
        ___lwmod@dividend 007A          ___lldiv@dividend 0074                 stringcode 000D  
                sprintf@c 002E                  sprintf@f 0020          ___lldiv@quotient 0079  
         ___lwmod@divisor 0078           ___lwmod@counter 007D                  stringdir 000D  
                stringtab 0003                _UART_Print 00DB          ?_UART_Data_Ready 0070  
